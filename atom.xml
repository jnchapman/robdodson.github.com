<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2014-09-18T09:31:18-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shadow DOM CSS Cheat Sheet]]></title>
    <link href="http://robdodson.me/blog/2014/04/10/shadow-dom-css-cheat-sheet/"/>
    <updated>2014-04-10T22:56:00-07:00</updated>
    <id>http://robdodson.me/blog/2014/04/10/shadow-dom-css-cheat-sheet</id>
    <content type="html"><![CDATA[<p>This guide is my attempt to track the progress of all the new CSS selectors which affect the Shadow DOM. I&#8217;ve written this from the perspective of someone who uses <a href="http://polymer-project.org">Polymer</a> so in a few places I point out polyfill features like <code>shim-shadowdom</code> and <code>polyfill-next-selector</code>. But the selectors themselves are all native and comply to <a href="http://drafts.csswg.org/css-scoping/">the current draft spec</a>.</p>

<!-- more -->


<p>Found a bug? <a href="https://github.com/robdodson/robdodson.github.com/blob/source/source/_posts/2014-04-10-shadow-dom-css-cheat-sheet.markdown">Submit a pull request!</a></p>

<p>Follow <a href="http://twitter.com/rob_dodson">@rob_dodson on the twitters</a></p>

<br>


<br>




<h2><a href="#shadow" id="shadow" class="no-underline">::shadow</a></h2>


<p>Selects shadow trees that are one level deep inside of an element. Will need to be combined with <code>shim-shadowdom</code> directive if used outside of a Polymer element in browsers that lack support for the native selector.</p>

<figure class='code'><pre><code>x-foo::shadow h1 {
  color: red;
}</code></pre></figure>


<p><a href="http://codepen.io/robdodson/pen/HeLEb">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-shadow">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#deep" id="deep" class="no-underline">/deep/</a></h2>


<p>Selects shadow trees that are N levels deep inside of an element. Will need to be combined with <code>shim-shadowdom</code> directive if used outside of a Polymer element in browsers that lack support for the native selector.</p>

<figure class='code'><pre><code>x-foo /deep/ h1 {
  color: red;
}</code></pre></figure>


<p><a href="http://codepen.io/robdodson/pen/wraDn/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-deep">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#host" id="host" class="no-underline">:host</a></h2>


<p>Selects a shadow host element. May contain additional identifiers in parenthesis.</p>

<figure class='code'><pre><code>:host(.fancy) {
  display: inline-block;
  background: purple;
}</code></pre></figure>


<p><a href="http://codepen.io/robdodson/pen/rDuyJ/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-host0">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#host-context" id="host-context" class="no-underline">:host-context</a></h2>


<p>Selects a shadow host based on a matching parent element.</p>

<figure class='code'><pre><code>:host-context(.blocky) {
  display: block
  background: red;
}</code></pre></figure>


<p><a href="http://codepen.io/robdodson/pen/ftpoG/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-host-context">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#content" id="content" class="no-underline">::content</a></h2>


<p>Selects distributed nodes inside of an element. Needs to be paired with <code>polyfill-next-selector</code> for browsers that do not support the native selector.</p>

<figure class='code'><pre><code>::content h1 {
  color: red;
}</code></pre></figure>


<p><a href="http://codepen.io/robdodson/pen/FokEw/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-content">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Bower and Polymer]]></title>
    <link href="http://robdodson.me/blog/2014/03/29/setting-up-bower-and-polymer/"/>
    <updated>2014-03-29T16:17:00-07:00</updated>
    <id>http://robdodson.me/blog/2014/03/29/setting-up-bower-and-polymer</id>
    <content type="html"><![CDATA[<p>So, you&#8217;re ready to dive into Polymer but you&#8217;re not so sure about this whole Bower thing. Have no fear! In this short screencast I&#8217;ll walk you through installing Bower, creating a project with the <code>bower init</code> command, and building your first Polymer element.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/1rz334A8U7o "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@font-face doesn't work in the Shadow DOM]]></title>
    <link href="http://robdodson.me/blog/2013/11/19/at-font-face-doesnt-work-in-shadow-dom/"/>
    <updated>2013-11-19T09:27:00-08:00</updated>
    <id>http://robdodson.me/blog/2013/11/19/at-font-face-doesnt-work-in-shadow-dom</id>
    <content type="html"><![CDATA[<p>I was building custom elements with Polymer the other day, and I thought it would be cool to include Font Awesome for some sweet icon goodness. Everything was going great, until I switched over to Canary to check my work.</p>

<!-- more -->


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/polymer-fonts-busted.png" title="'Busted Polymer Fonts'" ></p>

<p>uh oh&#8230;</p>

<p>At first, I was pretty confused. Why was everything working fine in Chrome, but acting crazy in Canary? I did some digging and manged to turn up <a href="https://groups.google.com/d/msg/polymer-dev/UUwew3x82EU/m9x2qWPi9ZoJ">this thread</a> on the Polymer mailing list.</p>

<h2>The Fix</h2>

<p>I had a bit of an &#8220;aha moment&#8221; when I remembered that the current version of Chrome doesn&#8217;t actually hide any styles in the Shadow DOM, so my <code>@font-face</code> rules were ending up in the global scope. Canary, on the other hand, is encapsulating those styles in a shadow boundary and falling prey to an apparent bug.</p>

<p>A simple workaround is to pull your <code>@font-face</code> rules out of the stylesheet for your element, and move them to the top of your import, like so:</p>

<figure class='code'><pre><code>&lt;style&gt;
  @font-face {
    font-family: 'FontAwesome';
    src: url('../fonts/fontawesome-webfont.eot?v=4.0.3');
    src: url('../fonts/fontawesome-webfont.eot?#iefix&v=4.0.3') format('embedded-opentype'), url('../fonts/fontawesome-webfont.woff?v=4.0.3') format('woff'), url('../fonts/fontawesome-webfont.ttf?v=4.0.3') format('truetype'), url('../fonts/fontawesome-webfont.svg?v=4.0.3#fontawesomeregular') format('svg');
    font-weight: normal;
    font-style: normal;
  }
&lt;/style&gt;

&lt;polymer-element name="semantic-ui-icon" noscript&gt;
  &lt;template&gt;
    &lt;link rel="stylesheet" href="./icon.css"&gt;
    &lt;content&gt;&lt;/content&gt;
  &lt;/template&gt;
&lt;/polymer-element&gt;</code></pre></figure>


<p>I found this approach <a href="http://www.polymer-project.org/docs/polymer/styling.html#making-styles-global">in the Polymer documentation</a>, so I&#8217;m hoping it&#8217;s considered a best practice. You&#8217;ll also need to do this if you&#8217;re using <code>@-webkit-keyframes</code> rules.</p>

<p>I hope that clears things up for some of you who may have been stuck. I know it took me a couple days to come up with this solution, so I thought it best to go ahead and post about it :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Cat and the Hat CSS Selectors]]></title>
    <link href="http://robdodson.me/blog/2013/11/15/the-cat-and-the-hat-css-selectors/"/>
    <updated>2013-11-15T11:08:00-08:00</updated>
    <id>http://robdodson.me/blog/2013/11/15/the-cat-and-the-hat-css-selectors</id>
    <content type="html"><![CDATA[<p><em>03/18/2014: This post is now out of date. The cat and hat CSS selectors have been removed in favor of <a href="http://drafts.csswg.org/css-scoping/#shadow-pseudoelement"><code>::shadow</code></a> and <a href="http://drafts.csswg.org/css-scoping/#deep-combinator"><code>/deep/</code></a>. Take a look at <a href="http://drafts.csswg.org/css-scoping/">the CSS Scoping Draft Spec</a> for current selector status.</em></p>

<p>One of the trickier aspects of encapsulating Shadow DOM CSS is figuring out how much access the parent document should have. Initially it was thought that the Shadow DOM&#8217;s author would decide which elements could be exposed for styling <a href="http://robdodson.me/blog/2013/08/29/shadow-dom-styles-cont-dot#parts">by using <code>part</code> attributes</a>, but it seems like that might be too limiting. The thinking now is that the shadow boundary should prevent <em>accidental</em> styling of the shadow DOM, but allow intentional styles. That&#8217;s where the new &#8220;cat&#8221; and &#8220;hat&#8221; CSS selectors come in.</p>

<!-- more -->


<h2>Support <a href="#" id="support"></a></h2>

<p>In order to try the examples I suggest you use <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a> v33 or greater.</p>

<p>Also make sure you&#8217;ve enabled <strong>Experimental Web Platform features</strong> in Chrome&#8217;s <code>chrome://flags</code>.</p>

<h2>The Hat <a href="#" id="the-hat"></a></h2>

<p>The hat selector, a single caret ( ^ ), allows the parent document to pierce the <strong>upper shadow boundary</strong> and style elements that are one shadow root deep. If you have an element that only has one shadow root you can style pretty much anything inside of it using the hat.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="EhIax" data-user="robdodson" data-default-tab="css" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/EhIax'>Shadow DOM &#8220;Hat&#8221; CSS selector</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>


<h2>The Cat <a href="#" id="the-cat"></a></h2>

<p>The cat, a double caret ( ^^ ) is much more powerful. It allows you to pierce every layer of the shadow DOM, so if you have shadow DOM within shadow DOM (a common occurrence when you nest custom elements) you can style all of them at once.</p>

<p data-height="315" data-theme-id="0" data-slug-hash="wFqJg" data-user="robdodson" data-default-tab="css" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/wFqJg'>Shadow DOM &#8220;Cat&#8221; CSS selector</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>


<h2>Styling Native Elements <a href="#" id="styling-native-elements"></a></h2>

<p><a href="https://twitter.com/Volker_E/status/401202275009310722">@Volker_E asked</a> if the cat and hat selectors could be used to style the shadow DOM of native elements like <code>&lt;video&gt;</code>. As it turns out that <em>does</em> work, which is pretty cool.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="iaJHd" data-user="robdodson" data-default-tab="css" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/iaJHd'>Shadow DOM &#8220;Cat&#8221; and &#8220;Hat&#8221; CSS selectors</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repeating Templates in Polymer]]></title>
    <link href="http://robdodson.me/blog/2013/11/12/repeating-templates-in-polymer/"/>
    <updated>2013-11-12T15:14:00-08:00</updated>
    <id>http://robdodson.me/blog/2013/11/12/repeating-templates-in-polymer</id>
    <content type="html"><![CDATA[<p>I ran into a little issue this afternoon working with templates in Polymer and I wanted to quickly jot down my thoughts in case others bump up against this.</p>

<!-- more -->


<h2>Bindings</h2>

<p>Bindings allow you to easily pipe some data into your markup from a JavaScript object of some kind. If you&#8217;ve worked with a library like Mustache or Handlebars before then they should feel familiar.</p>

<p>In Polymer land, the <code>&lt;template&gt;</code> tag has been extended so it supports a few handy binding attributes. These include <code>bind</code>, <code>repeat</code>, <code>if</code>, and <code>ref</code>.</p>

<h2>How Not to Do It</h2>

<p>If you take a look at the Polymer docs on <a href="http://www.polymer-project.org/platform/template.html">template bindings</a> you&#8217;ll notice that the binding attribute (<code>bind</code>, <code>repeat</code>, etc.) is always located on the first template. For instance:</p>

<figure class='code'><pre><code>&lt;template repeat="&#123;{ collection }}"&gt;
  Creates an instance with  for every element in the array collection.
&lt;/template&gt;</code></pre></figure>


<p>This lead me to believe that I should write my element like this:</p>

<figure class='code'><pre><code>&lt;polymer-element name="polymer-letters"&gt;
  &lt;template repeat="&#123;{ letter in letters }}"&gt;
    &#123;{ letter }}
  &lt;/template&gt;
  &lt;script&gt;
    Polymer('polymer-letters', {
      letters: ['a', 'b', 'c']
    });
  &lt;/script&gt;
&lt;/polymer-element&gt;</code></pre></figure>


<p>But unfortunately that does not work <span style="color: grey;">#sadtrombone.</span></p>

<h2>The Right Way</h2>

<p>Polymer uses the first <code>template</code> element to create Shadow DOM, so if you want to use a binding <strong>you&#8217;ll need to nest it <em>inside</em> another template.</strong></p>

<p>Our updated example would look like this:</p>

<figure class='code'><pre><code>&lt;polymer-element name="polymer-letters"&gt;
  &lt;template&gt;
    &lt;template repeat="&#123;{ letter in letters }}"&gt;
      &#123;{ letter }}
    &lt;/template&gt;
  &lt;/template&gt;
  &lt;script&gt;
    Polymer('polymer-letters', {
      letters: ['a', 'b', 'c']
    });
  &lt;/script&gt;
&lt;/polymer-element&gt;</code></pre></figure>


<p>And here it is running on CodePen:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="wxrqf" data-user="robdodson" data-default-tab="html" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/wxrqf'>Polymer Template Bindings</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>


<p>I mentioned this to Eric Bidelman and he opened <a href="https://github.com/Polymer/docs/issues/191">a ticket to improve the docs</a>, so keep an eye out for that. Hope this helps some of you that may have been stuck :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Components Revolution]]></title>
    <link href="http://robdodson.me/blog/2013/10/24/web-components-revolution/"/>
    <updated>2013-10-24T12:18:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/10/24/web-components-revolution</id>
    <content type="html"><![CDATA[<p>The slides from my talk and workshop titled Web Components Revolution are now live! Please be sure to view them using Chrome Canary and follow the instructions to enable any flags that you might need in order to properly experience native Web Components. The talk and the workshop were serious labors of love and I hope you all enjoy the slides :)</p>

<br>


<h4><a href="http://robdodson.me/webcomponents-revolution">Web Components Revolution!</a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Markdown Tag with Polymer]]></title>
    <link href="http://robdodson.me/blog/2013/10/02/creating-a-markdown-tag-with-polymer/"/>
    <updated>2013-10-02T08:05:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/10/02/creating-a-markdown-tag-with-polymer</id>
    <content type="html"><![CDATA[<p>Ah Markdown&#8230; Such an amazing tool. I honestly would not be writing this blog post if Markdown did not exist. I tried many times to get in to blogging but I always found the writing experience, whether it be in a GUI or WordPress&#8217; HTML mode, too limiting. Markdown changed all of that for me and I think it&#8217;s high time we make it a full fledged member of our developer toolbox.</p>

<p>So today I&#8217;m going to show you how to build a Markdown tag using <a href="http://www.polymer-project.org/">Polymer, a Web Components framework from Google.</a></p>

<!-- more -->


<h2>Github</h2>

<p><a href="https://github.com/robdodson/mark-down">If you&#8217;d like to follow along you can grab the code from Github.</a></p>

<h2>The Setup</h2>

<p>First things first, we need to download the latest version of Polymer. I like to do this with <a href="http://bower.io">bower</a> and I would encourage you to do so as well. Although it hasn&#8217;t been discussed much, I think bower is going to be as important to web components as npm and the node_modules folder is to Node.js. When developers can assume the location and version of a dependency then they&#8217;re able to remove extra work from the consumer&#8217;s plate. But that&#8217;s a discussion for another day! For now let&#8217;s just run</p>

<figure class='code'><pre><code>bower init</code></pre></figure>


<p>to create our <code>bower.json</code> file.</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/bower-init.jpg" title="'bower init is kinda awesome'" ></p>

<p>And we&#8217;ll want to install our Polymer and Markdown dependencies so</p>

<figure class='code'><pre><code>bower install Polymer/polymer marked --save</code></pre></figure>


<p>Lastly we&#8217;ll setup a test page for our element. I&#8217;m going to assume that the element lives in a folder called (creatively) <code>elements</code> so we&#8217;ll import from there.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Markdown Polymer Element<span class="nt">&lt;/title&gt;</span>
    <span class="c">&lt;!-- Include platform.js to polyfill web components in old browsers --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;bower_components/platform/platform.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>

    <span class="c">&lt;!-- Import our polymer element --&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;elements/mark-down.html&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="c">&lt;!-- Test our awesome new tag --&gt;</span>
    <span class="nt">&lt;mark</span><span class="na">-down</span><span class="nt">&gt;</span><span class="err">&lt;</span>/mark-down&gt;
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></figure>


<h2>The Element</h2>

<p>We&#8217;ll start with a very basic skeleton in our <code>elements/mark-down.html</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;../polymer/polymer.html&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;polymer</span><span class="na">-element</span> <span class="na">name=</span><span class="s">&quot;mark-down&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;markdown&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="nx">Polymer</span><span class="p">(</span><span class="s2">&quot;mark-down&quot;</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="err">&lt;</span>/polymer-element&gt;
</code></pre></figure>


<p>Let&#8217;s walk through this a bit.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;polymer</span><span class="na">-element</span> <span class="na">name=</span><span class="s">&quot;mark-down&quot;</span><span class="nt">&gt;</span>
</code></pre></figure>


<p>This line tells Polymer that we&#8217;d like to define a new element and its tag name should be <code>mark-down</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;template&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;markdown&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></figure>


<p>This is our template which Polymer will convert to <a href="http://robdodson.me/blog/2013/08/26/shadow-dom-introduction/">Shadow DOM.</a> All of the Markdown that we write inside of the <code>&lt;mark-down&gt;</code> tag will be parsed and end up here.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;script&gt;</span>
  <span class="nx">Polymer</span><span class="p">(</span><span class="s2">&quot;mark-down&quot;</span><span class="p">);</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></figure>


<p>Finally, we call the Polymer constructor and pass it the name of our element. This makes our new tag available so we can start using it in the document. But first we&#8217;ll need to parse our Markdown into HTML!</p>

<h2>Markdown</h2>

<p>We&#8217;ll use Polymer&#8217;s <a href="http://www.polymer-project.org/docs/polymer/polymer.html#lifecyclemethods"><code>ready</code> callback</a> to grab the <code>textContent</code> of our tag and convert it all to Markdown. To define behaviors for our element we&#8217;ll pass a prototype object as the second argument to the Polymer constructor.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nx">Polymer</span><span class="p">(</span><span class="s2">&quot;mark-down&quot;</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">ready</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">markdown</span><span class="p">.</span><span class="nx">toHTML</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">markdown</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">parsed</span><span class="p">;</span>
  <span class="p">},</span>
  <span class="c1">// Remove excess white space</span>
  <span class="nx">trim</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">});</span>
</code></pre></figure>


<p>The first thing we do is to grab everything inside of the <code>&lt;mark-down&gt;</code> tag and remove any extra white space. Here I&#8217;m using a trim method that I borrowed from <a href="https://github.com/ryanseddon/markdown-component">Ryan Seddon&#8217;s Markdown element.</a> Big thanks to Ryan :D</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nx">ready</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span>
  <span class="p">...</span>
<span class="p">},</span>
</code></pre></figure>


<p>Next we convert the content into Markdown using the <code>toHTML</code> method of our Markdown library. Then we take this new, more presentational markup, and add it to the <code>#markdown</code> div inside of our <code>template</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nx">ready</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="kd">var</span> <span class="nx">parsed</span> <span class="o">=</span> <span class="nx">markdown</span><span class="p">.</span><span class="nx">toHTML</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">markdown</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">parsed</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></figure>


<h3>Node Finding</h3>

<p>You might notice the funny use of <code>$</code> and think I&#8217;m doing something clever with jQuery. What&#8217;s actually happening is that Polymer creates a map of any element inside of our template with an <code>id</code>. It then stores this map in a <code>$</code> property. So if you&#8217;re using ids you can quickly access elements with the use of <code>this.$.someId</code>. In the Polymer docs this is referred to as <a href="http://www.polymer-project.org/getting-started.html#automatic-node-finding">automatic node finding.</a></p>

<p><em>But aren&#8217;t ids an anti-pattern?</em></p>

<p>Although the traditional document model only allows for one id per page, the Shadow DOM creates a kind of clean slate where each element has its own id sandbox. This means we can use an id of <code>#markdown</code> in our element and not worry if the parent document also contains an element with id <code>#markdown</code>. Pretty nifty!</p>

<h2>Test</h2>

<p>The only thing left is for us to throw some Markdown into our tag to test it out.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;mark</span><span class="na">-down</span><span class="nt">&gt;</span>
  # This is a heading
  ## This is a subheading

  Here is **more** _Markdown!_

  `This is some codez`

  This [is a link](http://robdodson.me)
<span class="err">&lt;</span>/mark-down&gt;
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/markdown-example.jpg" title="'sweet sweet markdown!'" ></p>

<p>Piece O&#8217; Cake!</p>

<h2>Moar!</h2>

<p>There&#8217;s a lot more that we could do, for instance, using something like <code>contenteditable</code> to allow us to toggle back and forth between the source and the rendered content. <a href="https://github.com/robdodson/mark-down">I&#8217;ve posted the code on Github</a> so fork it and go crazy.</p>

<p>Be sure to leave a comment if you want to share your experiments!</p>

<p>Till next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Art of Fear Blogging]]></title>
    <link href="http://robdodson.me/blog/2013/09/16/the-art-of-fear-blogging/"/>
    <updated>2013-09-16T12:51:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/09/16/the-art-of-fear-blogging</id>
    <content type="html"><![CDATA[<p>Years ago <a href="http://www.radiolab.org/2011/mar/08/you-v-you/">I heard a radio story about a woman hopelessly addicted to cigarettes.</a> Although she tried numerous times to quit, the temptation always won out. So she devised a plan. She told her best friend that if she ever caught her smoking again, she would have to send $5,000 to the Ku Klux Klan. Her best friend, acting as the enforcer, would hold her to it.</p>

<!-- more -->


<p>There&#8217;s a name for this. It&#8217;s called a <a href="http://en.wikipedia.org/wiki/Ulysses_pact">Ulysses pact.</a></p>

<p>As the story goes, Ulysses wanted to hear the song of the Sirens, but he knew that doing so would cause him to crash his ship into the rocks. The song was just too irresistible; it would drive any man mad with desire. So Ulysses struck a deal with his men. They would tie him to the mast and put beeswax in their ears. By doing so they would be unable to hear Ulysses&#8217; commands. As they approached the island Ulysses became transfixed, but try as he might he couldn&#8217;t escape or convince his men to drive the boat to the shore.</p>

<p><strong>He made a decision in the present which (literally) bound his future self.</strong></p>

<h2>Know Your Sirens</h2>

<p>I wanted to elevate my career and push myself to be a better developer. I knew that one of the best ways to do this was to start writing. But the fact of the matter is, writing a blog post to explain a technical topic is just <em>not fun.</em> <strong>It&#8217;s a struggle!</strong> You feel like an idiot most of the time. And at the end of it all you look at your work and realize that you sound like a robot.</p>

<p><strong>It&#8217;s very easy to get bogged down and to not do it consistently. But consistency is key to forming any good habit.</strong></p>

<p>To overcome these obstacles I made a deal. I publicly announced that I would give $500 to a politician I was not fond of unless I published a blog post every day for 60 days. I&#8217;ve come to refer to this as <strong>Fear Blogging.</strong></p>

<p><strong>I made a decision in the present which (figuratively) bound my future self.</strong></p>

<p>I&#8217;ll admit that those 60 days were hard. There were numerous times when I would come home late, exhausted from work, and I still had to put out a thoughtful blog post. <a href="http://robdodson.me/blog/2012/06/23/failing-at-ruby/">Some of them are not so good.</a></p>

<p>But when it was all over, I emerged on the other side and the goal was completed! It felt amazing. I had judo-ed one of my biggest character flaws—my desire to quit—and turned it into a strength! What else could I use these new found powers on? Could I force myself to go to the gym or learn Mandarin? Maybe I could take up photography with the goal of taking 100 pictures every day. The possibilities are endless. It feels, in many ways, like I&#8217;ve finally found a loophole in my own lazy personality.</p>

<h2>Tips</h2>

<p><strong>Choose one thing and stick to it.</strong></p>

<p>I&#8217;ve tried doing pacts where I&#8217;m writing, going to the gym and learning a new language all at the same time. Typically those end up being too stressful. You&#8217;re trying to form a habit so make it something that you really want to do and focus on just that one thing.</p>

<p><strong>Find a buddy.</strong></p>

<p>Making a public declaration that you&#8217;re going to do something on Facebook and Twitter is a great start but in reality nobody on those sites is going to hold you to it. They read your post, Like it, and move on. It&#8217;s better to find a friend you trust and make them act as your enforcer. When my buddy <a href="http://somerandomdude.com/2013/07/07/my-last-three-months-blogging-under-fear/">P.J. Onori tried Fear Blogging</a> I promised him that if he didn&#8217;t do his work I was going to force him to pay the penalty. Not only did this give me a ton of sadistic glee but it also made P.J.&#8217;s contract all the more binding and real.</p>

<p><strong>Don&#8217;t decorate the house.</strong></p>

<p>I&#8217;ve noticed a lot of my friends say they want to blog but first they need to &#8220;update their site.&#8221; Or, if they don&#8217;t have a site, then they need to get one and it needs to be really spiffy. I like to say <em>that&#8217;s like decorating a house before you&#8217;ve decided to live in it</em>. You&#8217;re going to waste a ton of effort on fixing everything up and that&#8217;s time that would be better spent accomplishing your goal. My advice is to write 10 or 15 posts, then worry about how things look. Get into the habit of jogging before you spend a bunch of time picking out the most perfect shoes. You get what I&#8217;m saying :)</p>

<h2>Whatever It Takes</h2>

<p>I&#8217;ve found that once you complete a big goal, it gives you a little more self confidence and next time you don&#8217;t have to do the whole production of making a pact with harsh penalties. Today I don&#8217;t need to Fear Blog because I&#8217;ve established the habit of writing. But the option&#8217;s there if I ever need it to help me achieve a new goal.</p>

<p>Now, dear reader, it&#8217;s your turn.</p>

<p><strong>What are you going to accomplish?</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadow DOM: JavaScript]]></title>
    <link href="http://robdodson.me/blog/2013/09/02/shadow-dom-javascript/"/>
    <updated>2013-09-02T20:46:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/09/02/shadow-dom-javascript</id>
    <content type="html"><![CDATA[<p>We&#8217;re getting to a point where we&#8217;ve covered most of what there is to know about <a href="http://robdodson.me/blog/2013/03/16/html5-template-tag-introduction/">templates</a>, <a href="http://robdodson.me/blog/2013/08/20/exploring-html-imports/">imports</a> and shadow DOM (<a href="http://robdodson.me/blog/2013/08/26/shadow-dom-introduction/">1</a>, <a href="http://robdodson.me/blog/2013/08/27/shadow-dom-the-basics/">2</a>, <a href="http://robdodson.me/blog/2013/08/28/shadow-dom-styles/">3</a>, <a href="http://robdodson.me/blog/2013/08/29/shadow-dom-styles-cont-dot/">4</a>). The end goal for all of these technologies is <strong>custom elements</strong>, but we&#8217;re not <em>quite</em> there yet. I want you to understand the basics of working with JavaScript and the shadow DOM before diving head first into making your own elements. So in this post I&#8217;m going to explain some things to watch out for, in particular around how events work. With this knowledge under your belt you&#8217;ll be in a good place to start creating your own custom elements.</p>

<p>Let&#8217;s get crackin&#8217;!</p>

<!--more-->


<p><em>Before we get started I wanted to thank Eric Bidelman for his <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-301/">amazing article on advanced Shadow DOM</a>. Most of this article is my interpretation of his post and I&#8217;m only covering a subset of what he presented. Definitely go read <a href="http://www.html5rocks.com/en/tutorials/#webcomponents">everything on HTML5 Rocks that pertains to Web Components</a> when you get a chance.</em></p>

<h2>Support <a href="#" id="support"></a></h2>

<p>In order to try the examples I suggest you use <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a> v35 or greater.</p>

<p>Also make sure you&#8217;ve enabled the following in Chrome&#8217;s <code>about:flags</code>.</p>

<p>√ Experimental Web Platform features<br>
√ Experimental JavaScript<br></p>

<h2>Codez! <a href="#" id="codez"></a></h2>

<p>I&#8217;ve created a sketchbook for this post and future Web Components related stuff. <a href="https://github.com/robdodson/webcomponents-sketchbook">You can grab the sketchbook on GitHub.</a> For each of the examples that I cover I&#8217;ll link to the sketch so you can quickly try things out.</p>

<h2>JavaScript Scope <a href="#" id="javascript-scope"></a></h2>

<h3>Sketch 13: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/13-javascript-scope">javascript-scope</a></h3>

<p>Remember when I spent all of that time <a href="http://robdodson.me/blog/2013/08/28/shadow-dom-styles/">explaining how Shadow DOM CSS was encapsulated and protected from the parent document</a> and how awesome that all was? You might also think that JavaScript works the same way—<em>I did at first</em>—but that&#8217;s actually not the case. With a few exceptions, which I&#8217;ll discuss later, JavaScript in the Shadow DOM works pretty much exactly as it always has. That means all the best practices you&#8217;ve learned over the years still apply.</p>

<p>Here&#8217;s an example of what I&#8217;m talking about.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;host&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Hello World!<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#host&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;window.foo = &#39;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-js1.jpg" title="'Shadow DOM global variable'" ></p>

<p>Even though we&#8217;re using a template tag and our script block is inside the Shadow DOM, the <code>foo</code> variable still attaches itself to the <code>window</code>. There&#8217;s no special magic to keep it out of the global scope. Instead we need to rely on our trusty friend, <a href="http://en.wikipedia.org/wiki/Immediately-invoked_function_expression">the IIFE</a>, to make sure everything stays protected.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;template&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Hello World!<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;script&gt;</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
  <span class="p">}());</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-js2.jpg" title="'Shadow DOM IIFE'" ></p>

<p>That&#8217;s more like it!</p>

<h2>Event Retargeting <a href="#" id="event-retargeting"></a></h2>

<p>One place where Shadow DOM JavaScript really differs from conventional script is in regard to event dispatching. The thing to remember is that <strong>events originating from nodes inside of the shadow DOM are retargeted so they appear to come from the shadow host.</strong></p>

<p>I know that doesn&#8217;t really sink in without an example so try this out.</p>

<h3>Sketch 14: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/14-event-retargeting-shadow-nodes">event-retargeting-shadow-nodes</a></h3>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;normal-text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;I&#39;m normal text&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;host&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>

  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;shadow-text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;I&#39;m shadow text&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/template&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#host&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>

    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39; clicked!&#39;</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><a class="jsbin-embed" href="http://jsbin.com/IpaNAMi/3/embed?console,output">Shadow DOM Event Retargeting</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<p>Click on each of the above text fields and checkout what the console outputs. When you click on the &#8220;normal text&#8221; field it logs the <code>id</code> of that input. However, when you click on the &#8220;shadow text&#8221; field it logs the <code>id</code> of the host element (which is just <code>#host</code>). This is because <strong>events coming from shadow nodes have to be retargeted otherwise they would break encapsulation.</strong> If the event target continued to point at <code>#shadow-text</code> then anyone could dig around inside of our Shadow DOM and start messing things up.</p>

<h3>Distributed Nodes</h3>

<p>If you recall from the last post we talked about <a href="http://robdodson.me/blog/2013/08/29/shadow-dom-styles-cont-dot#distributed-nodes">distributed nodes</a>, which are bits of content taken from the shadow host and projected into the Shadow DOM. You might think that since these nodes appear in the Shadow DOM that their events would be retargeted as well. But that&#8217;s not the case.</p>

<p>Heres&#8217; another example to demonstrate.</p>

<h3>Sketch 15: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/15-event-retargeting-distributed-nodes">event-retargeting-distributed-nodes</a></h3>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;normal-text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;I&#39;m normal text&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;host&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;distributed-text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;I&#39;m distributed text&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;shadow-text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;I&#39;m shadow text&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;content&gt;&lt;/content&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/template&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#host&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>

    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39; clicked!&#39;</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><a class="jsbin-embed" href="http://jsbin.com/UyIRUta/2/embed?console,output">Shadow DOM Event Retargeting</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<p>Like before, as you click on each input field you&#8217;ll see the id of the event&#8217;s target element. Clicking on the &#8220;distributed text&#8221; field shows that its event target remains intact. That&#8217;s because a distributed node comes from the parent document, so the user already has access to it. There&#8217;s no need to retarget its events and, in fact, you probably wouldn&#8217;t want to. If a user gives you a button to style with Shadow DOM they&#8217;re going to want to be able to listen to click events on it at some point.</p>

<h2>Blocked Events <a href="#" id="blocked-events"></a></h2>

<h3>Sketch 16: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/16-stopped-events">stopped-events</a></h3>

<p>In some instances events are killed off rather than retargeted. The following events are always stopped at the root node and cannot be observed by the parent document:</p>

<ul>
<li><code>abort</code></li>
<li><code>error</code></li>
<li><code>select</code></li>
<li><code>change</code></li>
<li><code>load</code></li>
<li><code>reset</code></li>
<li><code>resize</code></li>
<li><code>scroll</code></li>
<li><code>selectstart</code></li>
</ul>


<p>Here&#8217;s an example to demonstrate what I mean.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;normal-text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;I&#39;m normal text&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;host&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;distributed-text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;I&#39;m distributed text&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;template&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;content&gt;&lt;/content&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;shadow-text&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;I&#39;m shadow text&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#host&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>

    <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;select&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">&#39; text selected!&#39;</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><a class="jsbin-embed" href="http://jsbin.com/oLuZePo/2/embed?console,output">Shadow DOM Stopped Events</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<p>Here I&#8217;m listening for <code>select</code> events which are triggered whenever you click and drag to highlight some text. If you try highlighting the text inside of the &#8220;normal text&#8221; input it should log <code>normal-text text selected!</code>. The &#8220;distributed text&#8221; input reacts in a similar fashion. But if you try to highlight the text inside of the &#8220;shadow text&#8221; input, nothing appears in the console. The event has been killed at the shadow root so it can&#8217;t bubble up to the document where our event listener lives. Keep this in mind if you think you need to use any of the above listed events in your Shadow DOM.</p>

<h2>Conclusion <a href="#" id="conclusion"></a></h2>

<p>So nothing <em>too</em> bad I hope. A few gotchas with JavaScript events but otherwise things work pretty much like what we&#8217;re accustomed to. If you read through the previous posts then you&#8217;re ready to move on to Custom Elements and <a href="http://www.polymer-project.org/">Polymer</a>! Refer back to these articles if you feel lost and as always be sure to <a href="http://twitter.com/rob_dodson">hit me up on twitter</a> or leave a comment if you have any questions. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadow DOM: Styles (cont.)]]></title>
    <link href="http://robdodson.me/blog/2013/08/29/shadow-dom-styles-cont-dot/"/>
    <updated>2013-08-29T11:11:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/08/29/shadow-dom-styles-cont-dot</id>
    <content type="html"><![CDATA[<p>In <a href="http://robdodson.me/blog/2013/08/28/shadow-dom-styles/">yesterday&#8217;s post</a> we covered the basics of working with styles in Shadow DOM. But we&#8217;ve only just scratched the surface! Today we&#8217;ll continue from where we left off and explore how to work with <strong>distributed nodes</strong> and how to poke holes in our components so the outside world can reach in and customize &#8216;em.</p>

<!--more-->


<p><em>Before we get started I wanted to thank Eric Bidelman for his <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/">amazing article on styling the Shadow DOM</a>. Most of this article is my interpretation of his post. Definitely go read <a href="http://www.html5rocks.com/en/tutorials/#webcomponents">everything on HTML5 Rocks that pertains to Web Components</a> when you get a chance.</em></p>

<h2>Support <a href="#" id="support"></a></h2>

<p>In order to try the examples I suggest you use <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a> v31 or greater.</p>

<p>Also make sure you&#8217;ve enabled the following in Chrome&#8217;s <code>about:flags</code>.</p>

<p>√ Experimental Web Platform features<br>
√ Experimental JavaScript<br></p>

<p><em>I believe Shadow DOM is supported in Chrome without experimental flags but we may touch on other Web Component technologies that require them. Better to just turn them on now I think :)</em></p>

<h2>Codez! <a href="#" id="codez"></a></h2>

<p>I&#8217;ve created a sketchbook for this post and future Web Components related stuff. <a href="https://github.com/robdodson/webcomponents-sketchbook">You can grab the sketchbook on GitHub.</a> For each of the examples that I cover I&#8217;ll link to the sketch so you can quickly try things out.</p>

<h2>Distributed Nodes <a href="#" id="distributed-nodes"></a></h2>

<h3>Sketch 9: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/09-styling-distributed-nodes">styling-distributed-nodes</a></h3>

<p>From reading various blog posts I learned that when working with the shadow DOM you should make sure to keep your content separate from your presentation. In other words, if you have a button that&#8217;s going to display some text, that text should come from the page and not be buried in a shadow DOM template. Contents which come from the page and are added to the shadow DOM using the <code>&lt;content&gt;</code> tag are know as <strong>distributed nodes</strong>.</p>

<p>Initially I struggled to understand how it was possible to style these distributed nodes. I kept writing my CSS like this:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;some-shadow-host&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;button&gt;</span>Hello World!<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;template&gt;</span>
  <span class="nt">&lt;style&gt;</span>
    <span class="nd">:host</span> <span class="p">{</span>
      <span class="o">...</span>
    <span class="p">}</span>

    <span class="nt">button</span> <span class="p">{</span>
      <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="nt">&lt;/style&gt;</span>
  <span class="nt">&lt;content&gt;&lt;/content&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></figure>


<p>Thinking that if <code>button</code> came from the shadow host I should be able to just style it once it was inside my <code>&lt;content&gt;</code> tag. But that&#8217;s not quite how things work. Instead, distributed nodes need to be styled with the <code>::content</code> pseudo selector. This actually makes sense because we might want buttons inside of our shadow template to be styled differently from buttons which appear inside of our <code>&lt;content&gt;</code> tags.</p>

<p>Let&#8217;s look at an exmaple:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;widget&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;button&gt;</span>Distributed Awesomesauce<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;widget-template&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;style&gt;</span>
      <span class="o">:</span><span class="nd">:content</span> <span class="o">&gt;</span> <span class="nt">button</span> <span class="p">{</span>
        <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
        <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
        <span class="k">background</span><span class="o">:</span> <span class="nb">tomato</span><span class="p">;</span>
        <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
        <span class="k">border</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
        <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
    <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
  <span class="nt">&lt;/template&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.widget&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.widget-template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
    <span class="nx">template</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-distributed.jpg" title="'Styling distributed shadow DOM nodes'" ></p>

<p>Here we&#8217;re pulling in the <code>button</code> from our <code>.widget</code> shadow host and tossing it into our <code>&lt;content&gt;</code> tag. Using the <code>::content</code> pseudo selector, we target the <code>button</code> as a child with <code>&gt;</code> and set our fancy pants styles.</p>

<h3>Syntax Changes</h3>

<p>In previous versions of Chrome the syntax for styling distributed nodes looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code>content::-webkit-distributed(<span class="nt">&lt;selector&gt;</span>)
</code></pre></figure>


<p>But this style is being deprecated. As of today (August 29, 2013) <code>::content</code> is the proper syntax.</p>

<h2>Parts <a href="#" id="parts"></a></h2>

<h3>Sketch 10: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/10-styling-parts">styling-parts</a></h3>

<p>Up to this point we&#8217;ve celebrated the encapsulation benefits of the shadow DOM but sometimes you want to poke a few holes in the shadow boundary so the user can style your component.</p>

<p>Let&#8217;s say you&#8217;re creating a sign in form. Inside of your template you&#8217;ve defined the text size for the inputs but you&#8217;d like the user to be able to change this so it fits better with her site. Using the <code>::part</code> pseudo selector and <code>part</code> attribute we can expose any fields we want, thereby giving the user total freedom to override our defaults if they so choose.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;style&gt;</span>
    <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">username</span><span class="o">),</span>
    <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">password</span><span class="o">)</span> <span class="p">{</span>
      <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
      <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">btn</span><span class="o">)</span> <span class="p">{</span>
      <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;sign-up&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>

  <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;sign-up-template&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;style&gt;</span>
      <span class="nt">div</span><span class="o">[</span><span class="nt">part</span><span class="o">=</span><span class="s2">&quot;username&quot;</span><span class="o">],</span>
      <span class="nt">div</span><span class="o">[</span><span class="nt">part</span><span class="o">=</span><span class="s2">&quot;password&quot;</span><span class="o">]</span> <span class="p">{</span>
        <span class="k">font-size</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;username&quot;</span> <span class="na">part=</span><span class="s">&quot;username&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">id=</span><span class="s">&quot;password&quot;</span> <span class="na">part=</span><span class="s">&quot;password&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">part=</span><span class="s">&quot;btn&quot;</span><span class="nt">&gt;</span>Sign Up!<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/template&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.sign-up&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.sign-up-template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-part.jpg" title="'Styling a shadow DOM part'" ></p>

<p>There are three important bits of syntax I want to point out in this example.</p>

<p>The first is <em>how</em> we specify that an element is going to be a <code>part</code>. We do this through the use of the <code>part</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;username&quot;</span> <span class="na">part=</span><span class="s">&quot;username&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;</span>
</code></pre></figure>


<p>Next we specify a default style for this <code>part</code> using an attribute selector inside of our template.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;style&gt;</span>
  <span class="nt">div</span><span class="o">[</span><span class="nt">part</span><span class="o">=</span><span class="s2">&quot;username&quot;</span><span class="o">],</span>
  <span class="nt">div</span><span class="o">[</span><span class="nt">part</span><span class="o">=</span><span class="s2">&quot;password&quot;</span><span class="o">]</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></figure>


<p>Finally, we reach into the shadow DOM with the <code>::part</code> pseudo selector to override the style defaults.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;style&gt;</span>
  <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">username</span><span class="o">),</span>
  <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">password</span><span class="o">)</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
    <span class="k">border</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">btn</span><span class="o">)</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></figure>


<h3>Syntax Changes</h3>

<p>In previous versions of Chrome the <code>part</code> attribute was known as <code>pseudo</code>. A <code>pseudo</code> attribute would need to be prefixed with an <code>x-</code> and selecting the <code>pseudo</code> attribute looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code>.foo::x-slider-thumb {
  background-color: blue;
}
</code></pre></figure>


<p>This syntax is now deprecated and you should use <code>part</code> and <code>::part</code> instead.</p>

<h2>Variables <a href="#" id="variables"></a></h2>

<h3>Sketch 11: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/11-styling-with-variables">styling-with-variables</a></h3>

<p>Working with all of these hard coded styles is making my inner nerd sad. If you&#8217;ve been spoiled by LESS or SCSS, like I have, then you&#8217;ll quickly be longing for variables to hold all of your configurable values. Thankfully CSS3 variables are supported by the shadow DOM so let&#8217;s look at how we can tidy things up a bit.</p>

<p>We&#8217;ll use our previous example but this time we&#8217;ll work a little variable magic on it:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;style&gt;</span>
    <span class="nc">.sign-up</span> <span class="p">{</span>
      <span class="n">var</span><span class="o">-</span><span class="n">type</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">username</span><span class="o">),</span>
    <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">password</span><span class="o">)</span> <span class="p">{</span>
      <span class="n">var</span><span class="o">-</span><span class="n">borders</span><span class="o">:</span> <span class="m">1px</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;sign-up&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>

  <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;sign-up-template&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;style&gt;</span>
      <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">username</span><span class="o">),</span>
      <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">password</span><span class="o">)</span> <span class="p">{</span>
        <span class="k">font-size</span><span class="o">:</span> <span class="n">var</span><span class="p">(</span><span class="n">type</span><span class="o">-</span><span class="k">size</span><span class="p">);</span>
        <span class="k">border</span><span class="o">:</span> <span class="n">var</span><span class="p">(</span><span class="n">borders</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="nc">.sign-up</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">btn</span><span class="o">)</span> <span class="p">{</span>
        <span class="k">font-size</span><span class="o">:</span> <span class="n">var</span><span class="p">(</span><span class="n">type</span><span class="o">-</span><span class="k">size</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">id=</span><span class="s">&quot;username&quot;</span> <span class="na">part=</span><span class="s">&quot;username&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;username&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">id=</span><span class="s">&quot;password&quot;</span> <span class="na">part=</span><span class="s">&quot;password&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;password&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">part=</span><span class="s">&quot;btn&quot;</span><span class="nt">&gt;</span>Sign Up!<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/template&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.sign-up&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.sign-up-template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-part.jpg" title="'Styling a shadow DOM part'" ></p>

<p>We should wind up with the exact same output but things are a bit cleaner now.</p>

<p>Personally I&#8217;m not a fan of the CSS3 variable syntax but if you want to go preprocessor free I think it&#8217;s your best bet.</p>

<h2>Inheriting and Resetting Styles <a href="#" id="inheriting-and-resetting-styles"></a></h2>

<h3>Sketch 12: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/12-inheriting-and-resetting-styles">inheriting-and-resetting-styles</a></h3>

<h3>Applying Author Styles</h3>

<p>If your component contains text or other inheritable properties you may want it to match the page that&#8217;s hosting it. This is where <code>applyAuthorStyles</code> comes in to play. By setting <code>applyAuthorStyles</code> to <code>true</code> you&#8217;re telling the document that it&#8217;s ok for the user&#8217;s CSS to bleed through and affect your component. This is great for things like typography where you want your component to use the same font families and header sizes as the parent document.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;style&gt;</span>
    <span class="nt">body</span> <span class="p">{</span>
      <span class="k">font-family</span><span class="o">:</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">h2</span> <span class="p">{</span>
      <span class="k">text-decoration</span><span class="o">:</span> <span class="k">underline</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
      <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>

  <span class="nt">&lt;h2&gt;</span>This h2 is NOT in the shadow DOM<span class="nt">&lt;/h2&gt;</span>
  <span class="nt">&lt;p&gt;</span>Neither is this paragraph<span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;article&quot;</span><span class="nt">&gt;</span>Some interesting article content<span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;article-template&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h2&gt;</span>An Article Header<span class="nt">&lt;/h2&gt;</span>
    <span class="nt">&lt;p&gt;&lt;content&gt;&lt;/content&gt;&lt;/p&gt;</span>
  <span class="nt">&lt;/template&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.article&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">applyAuthorStyles</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="c1">// Note that you can also reset styles on a per &lt;shadow&gt; or</span>
    <span class="c1">// per &lt;content&gt; basis</span>
    <span class="c1">// http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#toc-shadow-resetstyles</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.article-template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
    <span class="nx">template</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-author-styles.jpg" title="'Applying author styles'" ></p>

<p>If we take a look at the CSS we can see that the user has directly styled all <code>h2</code>&#8217;s and <code>p</code>&#8217;s. Also everything on the page should inherit a <code>font-family</code> of Helvetica. By using <code>applyAuthorStyles</code> we&#8217;ve allowed the direct styles <em>and</em> the inherited <code>font-family</code> to bleed through.</p>

<h3>Reseting Inheritance</h3>

<p>In some cases we may wish to only allow the direct styles while resetting anything that would be inherited. Using the example above that would mean excluding the <code>font-family</code> of Helvetica which is inherited from the <code>body</code> style. To reset style inheritance we use the aptly named <code>resetStyleInheritance</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;script&gt;</span>
  <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.article&#39;</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">resetStyleInheritance</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// &lt;-- get rid of anything inherited</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">applyAuthorStyles</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.article-template&#39;</span><span class="p">);</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
  <span class="nx">template</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-reset-inheritance.jpg" title="'Reset style inheritance'" ></p>

<p>Now our component reverts to the default <code>font-family</code> of Times New Roman while still allowing direct author styles on <code>h2</code> and <code>p</code>. <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#style-inherit-cheetsheet">Eric Bidelman&#8217;s great post on Shadow DOM 201 has a handy cheat sheet</a> so you can sort out when you want to use <code>applyAuthorStyles</code> and when you want to use <code>resetStyleInheritance</code>.</p>

<h2>Conclusion <a href="#" id="conclusion"></a></h2>

<p>If you&#8217;ve read over <a href="http://robdodson.me/blog/2013/08/28/shadow-dom-styles/">the last post</a> and this one then you now know as much about styling the shadow DOM as I do. But we haven&#8217;t even talked about JavaScript yet! We&#8217;ll save that for tomorrow&#8217;s post :) As always if you have questions <a href="http://twitter.com/rob_dodson">hit me up on twitter</a> or leave a comment. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadow DOM: Styles]]></title>
    <link href="http://robdodson.me/blog/2013/08/28/shadow-dom-styles/"/>
    <updated>2013-08-28T10:56:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/08/28/shadow-dom-styles</id>
    <content type="html"><![CDATA[<p><a href="http://robdodson.me/blog/2013/08/27/shadow-dom-the-basics/">Yesterday&#8217;s post</a> was all about coding and structuring your first Shadow DOM elements. But I&#8217;m sure most of you were wondering, how do we style these things?!</p>

<p>The use of CSS in Shadow DOM is an interesting and large topic. So large, in fact, that I&#8217;m going to split it up over the next couple of posts. Today we&#8217;ll learn the basics of using CSS within the <strong>shadow boundary</strong>, and also how to style our <strong>shadow hosts</strong>.</p>

<!--more-->


<p><em>Before we get started I wanted to thank Eric Bidelman for his <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/">amazing article on styling the Shadow DOM</a>. Most of this article is my interpretation of his post. Definitely go read <a href="http://www.html5rocks.com/en/tutorials/#webcomponents">everything on HTML5 Rocks that pertains to Web Components</a> when you get a chance.</em></p>

<h2>Support <a href="#" id="support"></a></h2>

<p>In order to try the examples I suggest you use <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a> v31 or greater.</p>

<p>Also make sure you&#8217;ve enabled the following in Chrome&#8217;s <code>about:flags</code>.</p>

<p>√ Experimental Web Platform features<br>
√ Experimental JavaScript<br></p>

<p><em>I believe Shadow DOM is supported in Chrome without experimental flags but we may touch on other Web Component technologies that require them. Better to just turn them on now I think :)</em></p>

<h2>Codez! <a href="#" id="codez"></a></h2>

<p>I&#8217;ve created a sketchbook for this post and future Web Components related stuff. <a href="https://github.com/robdodson/webcomponents-sketchbook">You can grab the sketchbook on GitHub.</a> For each of the examples that I cover I&#8217;ll link to the sketch so you can quickly try things out.</p>

<h2>Style Encapsulation <a href="#" id="style-encapsulation"></a></h2>

<h3>Sketch 4: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/04-style-encapsulation">style-encapsulation</a></h3>

<p>Astute readers probably noticed that I used a new term in the introduction for this post. That term is <strong>shadow boundary</strong> and it refers to the barrier that separates the regular DOM (the &#8220;light&#8221; DOM) from the shadow DOM. One of the primary benefits of the shadow boundary is that it prevents styles that are in the main document from leaking into the shadow DOM. This means that even though you might have a selector in your main document for all <code>&lt;h3&gt;</code> tags, that style will not be applied to your shadow DOM element unless you specifically allow it.</p>

<p>Examples? Yes, let&#8217;s.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;style&gt;</span>
      <span class="nt">button</span> <span class="p">{</span>
        <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
        <span class="k">font-family</span><span class="o">:</span> <span class="k">cursive</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
    <span class="nt">&lt;button&gt;</span>I&#39;m a regular button<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;div&gt;&lt;/div&gt;</span>

    <span class="nt">&lt;script&gt;</span>
      <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
      <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
      <span class="nx">root</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;style&gt;button { font-size: 24px; color: blue; } &lt;/style&gt;&#39;</span> <span class="o">+</span>
                       <span class="s1">&#39;&lt;button&gt;I\&#39;m a shadow button&lt;/button&gt;&#39;</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-styles1.jpg" title="'Shadow DOM style encapsulation'" ></p>

<p>Here we have two buttons. One is in the regular DOM, and the other is in the shadow DOM. You&#8217;ll notice that the style tag at the top of the page instructs all buttons to use a cursive font and to have a <code>font-size</code> of 18px.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;style&gt;</span>
  <span class="nt">button</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
    <span class="k">font-family</span><span class="o">:</span> <span class="k">cursive</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></figure>


<p>Because of the shadow boundary, the second button ignores this style tag and instead implements its own look. We never specifically override the <code>font-family</code> to change it back to sans serif, it just uses the typical browser defaults.</p>

<p>Keep in mind that the shadow boundary also protects the main document from the shadow DOM. You&#8217;ll notice that our shadow button has a <code>color</code> of blue. But the button in the original document maintains its default appearance.</p>

<p>This kind of <strong>encapsulation</strong> is pretty amazing. For years we&#8217;ve struggled with style sheets that always seem to get bigger and bigger. Over time it can be difficult to add new styles because you&#8217;re worried you&#8217;ll break something elsewhere on the page. The style boundaries provided to us by the shadow DOM means that we can finally start to think about our CSS in a more local, component specific way.</p>

<h2>Styling :host <a href="#" id="styling-host"></a></h2>

<h3>Sketch 5: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/05-styling-host">styling-host</a></h3>

<p>I often think of the shadow host as if it&#8217;s the exterior of a building. Inside there&#8217;s all the inner workings of my widget and outside there should be a nice facade. In many cases you&#8217;ll want to apply some style to this exterior and that&#8217;s where the <code>:host</code> selector comes into play.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;style&gt;</span>
    <span class="nc">.widget</span> <span class="p">{</span>
      <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="nt">&lt;/style&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;widget&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.widget&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&lt;style&gt;&#39;</span> <span class="o">+</span>
                     <span class="s1">&#39;:host {&#39;</span> <span class="o">+</span>
                     <span class="s1">&#39;  border: 2px dashed red;&#39;</span> <span class="o">+</span>
                     <span class="s1">&#39;  text-align: left;&#39;</span> <span class="o">+</span>
                     <span class="s1">&#39;  font-size: 28px;&#39;</span> <span class="o">+</span>
                     <span class="s1">&#39;} &#39;</span> <span class="o">+</span>
                     <span class="s1">&#39;&lt;/style&gt;&#39;</span> <span class="o">+</span>
                     <span class="s1">&#39;&lt;content&gt;&lt;/content&gt;&#39;</span><span class="p">;</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-styles2.jpg" title="'Shadow DOM host styles'" ></p>

<p>Adding a red border to our widget doesn&#8217;t seem like much but there&#8217;s actually a number of interesting things happening here. For starters, notice that styles applied to the <code>:host</code> are inherited by elements within the shadow DOM. So our <code>&lt;p&gt;</code> ends up with a <code>font-size</code> of 28px.</p>

<p>Also notice that the page is able to set the <code>text-align</code> inside the <code>:host</code> to center. The <code>:host</code> selector has low specificity by design, so it&#8217;s easier for the document to override it if it needs to. In this case the document style for <code>.widget</code> beats out the shadow style for <code>:host</code>.</p>

<h2>Styling by :host Type <a href="#" id="styling-by-host-type"></a></h2>

<h3>Sketch 6: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/06-styling-by-host-type">styling-host-by-host-type</a></h3>

<p>Because <code>:host</code> is a pseudo selector we can apply it to more than one tag to change the appearance of our component. Let&#8217;s do another example to demonstrate.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;p&gt;</span>My Paragraph<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;div&gt;</span>My Div<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;button&gt;</span>My Button<span class="nt">&lt;/button&gt;</span>

  <span class="c">&lt;!-- Our template --&gt;</span>
  <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;shadow-template&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;style&gt;</span>
      <span class="nt">p</span><span class="nd">:host</span> <span class="p">{</span>
        <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="nt">div</span><span class="nd">:host</span> <span class="p">{</span>
        <span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="nt">button</span><span class="nd">:host</span> <span class="p">{</span>
        <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="o">*</span><span class="nd">:host</span> <span class="p">{</span>
        <span class="k">font-size</span><span class="o">:</span> <span class="m">24px</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
    <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
  <span class="nt">&lt;/template&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="c1">// Create a shadow root for each element</span>
    <span class="kd">var</span> <span class="nx">root1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">root2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">root3</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">createShadowRoot</span><span class="p">();</span>

    <span class="c1">// We&#39;ll use the same template for each shadow root</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.shadow-template&#39;</span><span class="p">);</span>

    <span class="c1">// Stamp the template into each shadow root. Notice how</span>
    <span class="c1">// the different :host styles affect the appearance</span>
    <span class="nx">root1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
    <span class="nx">root2</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
    <span class="nx">root3</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-styles3.jpg" title="'Shadow DOM styling by host type'" ></p>

<p><em>I&#8217;ve switched to using a <a href="http://robdodson.me/blog/2013/03/16/html5-template-tag-introduction/">template tag</a> for this example since it makes working with the Shadow DOM a lot easier.</em></p>

<p>As you can see from the example above, we&#8217;re able to change the look of our component by matching the <code>:host</code> selector to a specific tag. We can also match against classes, IDs, attributes, etc. Really any valid CSS will do.</p>

<p>For instance, you could have <code>.widget-fixed</code>, <code>.widget-flex</code> and <code>.widget-fluid</code> <code>:hosts</code> if you wanted to build a highly responsive component. Or <code>.valid</code> and <code>.error</code> <code>:hosts</code> for form elements.</p>

<p>By using the <code>*</code> selector we&#8217;re able to create default styles which will apply to any <code>:host</code>, in this case setting all components to a <code>font-size</code> of 24px. This way you can construct the basic look for your component and then augment it with different <code>:host</code> types.</p>

<p>What about theming hosts based on their parent element? Well, there&#8217;s a selector for that too!</p>

<h2>Theming <a href="#" id="theming"></a></h2>

<h3>Sketch 7: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/07-theming">theming</a></h3>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;serious&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;serious-widget&quot;</span><span class="nt">&gt;</span>
      I am super serious, guys.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;playful&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;playful-widget&quot;</span><span class="nt">&gt;</span>
      Pretty little clouds...
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;widget-template&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;style&gt;</span>
      <span class="nd">:host</span><span class="o">(</span><span class="nc">.serious</span><span class="o">)</span> <span class="p">{</span>
        <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
        <span class="k">height</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
        <span class="k">padding</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
        <span class="k">font-family</span><span class="o">:</span> <span class="k">monospace</span><span class="p">;</span>
        <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
        <span class="k">font-size</span><span class="o">:</span> <span class="m">24px</span><span class="p">;</span>
        <span class="k">color</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span>
        <span class="k">background</span><span class="o">:</span> <span class="nb">tomato</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="nd">:host</span><span class="o">(</span><span class="nc">.playful</span><span class="o">)</span> <span class="p">{</span>
        <span class="k">width</span><span class="o">:</span> <span class="m">200px</span><span class="p">;</span>
        <span class="k">height</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
        <span class="k">padding</span><span class="o">:</span> <span class="m">50px</span><span class="p">;</span>
        <span class="k">font-family</span><span class="o">:</span> <span class="k">cursive</span><span class="p">;</span>
        <span class="k">font-size</span><span class="o">:</span> <span class="m">24px</span><span class="p">;</span>
        <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
        <span class="k">background</span><span class="o">:</span> <span class="nb">deepskyblue</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
    <span class="nt">&lt;content&gt;&lt;/content&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">root1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.serious-widget&#39;</span><span class="p">).</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">root2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.playful-widget&#39;</span><span class="p">).</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.widget-template&#39;</span><span class="p">);</span>
    <span class="nx">root1</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
    <span class="nx">root2</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-styles5.jpg" title="'Shadow DOM theming'" ></p>

<p>Using <code>:host()</code> syntax we&#8217;re able to completely change the look of our widget based on the containing element. This is pretty neat! I&#8217;m sure you&#8217;ve all used the child selector before, <code>.parent &gt; .child</code>, but have you ever wished for a parent selector, <code>.parent &lt; .child</code>? Now it&#8217;s possible, but only with the shadow DOM. I wonder if we&#8217;ll see this syntax tracked back to normal CSS someday?</p>

<h2>Styling :host States <a href="#" id="styling-host-states"></a></h2>

<h3>Sketch 8: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/08-styling-host-states">styling-host-states</a></h3>

<p>One of the best uses of the <code>:host</code> tag is for styling states like <code>:hover</code> or <code>:active</code>. For instance, let&#8217;s say you want to add a green border to a button when the user rolls over it. Easy!</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;button&gt;</span>My Button<span class="nt">&lt;/button&gt;</span>

  <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;button-template&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;style&gt;</span>
      <span class="o">*</span><span class="nd">:host</span> <span class="p">{</span>
        <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
        <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="o">*</span><span class="nd">:host:hover</span> <span class="p">{</span>
        <span class="k">border</span><span class="o">:</span> <span class="m">2px</span> <span class="k">solid</span> <span class="nb">green</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
    <span class="nt">&lt;content&gt;&lt;/content&gt;</span>
  <span class="nt">&lt;/template&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.button-template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">cloneNode</span><span class="p">(</span><span class="kc">true</span><span class="p">));</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-styles4.jpg" title="'Shadow DOM host state'" ></p>

<p>Nothing fancy but hopefully it gets your imagination going a bit. What other states do you think you could create?</p>

<h2>Conclusion <a href="#" id="conclusion"></a></h2>

<p>There&#8217;s still a lot more to talk about when it comes to styling the Shadow DOM. Let&#8217;s take a break for today and pick it up again tomorrow. As always if you have questions <a href="http://twitter.com/rob_dodson">hit me up on twitter</a> or leave a comment. Thanks!</p>

<h2><a href="http://robdodson.me/blog/2013/08/29/shadow-dom-styles-cont-dot/">Continue to Shadow DOM: Styles (cont.) &rarr;</a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadow DOM: The Basics]]></title>
    <link href="http://robdodson.me/blog/2013/08/27/shadow-dom-the-basics/"/>
    <updated>2013-08-27T08:52:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/08/27/shadow-dom-the-basics</id>
    <content type="html"><![CDATA[<p>In my <a href="http://robdodson.me/blog/2013/08/26/shadow-dom-introduction/">previous post</a>, I introduced the <strong>Shadow DOM</strong> and made the case for why it is important. Today, we&#8217;ll get our hands dirty with some code! By the end of this post, you&#8217;ll be able to create your own encapsulated widgets that pull in content from the outside world and rearrange their bits and pieces to produce something wholly different.</p>

<p>Let&#8217;s get started!</p>

<!--more-->


<h2>Support <a href="#" id="support"></a></h2>

<p>In order to try the examples, I suggest you use Google Chrome, v33 or greater.</p>

<h2>Codez! <a href="#" id="codez"></a></h2>

<p>I&#8217;ve created a sketchbook for this post and future Web Components related stuff. <a href="https://github.com/robdodson/webcomponents-sketchbook">You can grab the sketchbook on GitHub.</a> For each of the examples that I cover, I&#8217;ll link to the sketch so you can quickly try things out.</p>

<h2>A Basic Example <a href="#" id="basic-example"></a></h2>

<h3>Sketch 0: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/00-basic">basic</a></h3>

<p>Let&#8217;s take a look at a very simple HTML document.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;my-widget&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>My Widget Header<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>Some my-widget content<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;my-other-widget&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>My Other Widget Header<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>Some my-other-widget content<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p>In HTML, every element is considered to be a <strong>node</strong>. When you have a group of these nodes nested inside one another, it is known as a <strong>node tree</strong>.</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/tree-chart.svg" title="'A basic node tree!'" ></p>

<p>What&#8217;s unique about shadow DOM is that it allows us to create our own node trees, known as <strong>shadow trees</strong>, that encapsulate their contents and render only what they choose. This means we can inject text, rearrange content, add styles, etc. Here&#8217;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;widget&quot;</span><span class="nt">&gt;</span>Hello, world!<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;script&gt;</span>
  <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.widget&#39;</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
  <span class="nx">root</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;Im inside yr div!&#39;</span><span class="p">;</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-basic1.jpg" title="'Our first shadow dom'" ></p>

<p>Using the code above, we&#8217;ve replaced the text content of our <code>.widget</code> div using a shadow tree. To create a shadow tree, we first specify that a node should act as a <strong>shadow host</strong>. In this case, we use <code>.widget</code> as our shadow host. Then we add a new node to our shadow host, known as a <strong>shadow root</strong>. The shadow root acts as the first node in your shadow tree and all other nodes descend from it.</p>

<p>If you were to inspect this element in the Chrome Dev Tools, it would look something like this:</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-basic-inspect.jpg" title="'Inspecting our first shadow dom'" ></p>

<p>Do you see how <code>#shadow-root</code> is grayed out? That&#8217;s the shadow root we just created. <strong>The takeaway is that the content inside of the shadow host is <em>not</em> rendered. Instead, the content inside of the shadow root is what gets rendered.</strong></p>

<p>This is why, when we run our example, we see <code>Im inside yr div!</code> instead of <code>Hello, world!</code></p>

<p>We can visualize this process in another graph:</p>

<p><img class="center" src="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/assets/images/tree-of-trees.svg" title="'Shadow tree graph'" ></p>

<p>Let&#8217;s do one more example, to help it all sink in.</p>

<h2>A Basic Example (cont.) <a href="#" id="basic-example-cont"></a></h2>

<h3>Sketch 1: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/01-basic-cont">basic-cont</a></h3>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;widget&quot;</span><span class="nt">&gt;</span>Hello, world!<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.widget&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>

    <span class="kd">var</span> <span class="nx">header</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;h1&#39;</span><span class="p">);</span>
    <span class="nx">header</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;A Wild Shadow Header Appeared!&#39;</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">paragraph</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>
    <span class="nx">paragraph</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;Some sneaky shadow text&#39;</span><span class="p">;</span>

    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">header</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">paragraph</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-basic-cont1.jpg" title="'A slightly more advanced shadow dom sketch'" ></p>

<p>I&#8217;m taking our previous example and adding two additional elements to it. I&#8217;ve done this to illustrate that working with the shadow DOM is really not so different from working with the regular DOM. You still create elements and use <code>appendChild</code> or <code>insertBefore</code> to add them to a parent. In the Chrome Dev Tools it looks like this:</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-basic-cont-inspect.jpg" title="'Inspecting our shadow dom'" ></p>

<p>Just like before, the content in the <em>shadow host</em>, <code>Hello, world!</code>, is not rendered. Instead the content in the <em>shadow root</em> is rendered.</p>

<p>&#8220;That&#8217;s easy enough,&#8221; you might say. &#8220;But what if I actually <em>want</em> the content in my shadow host to render?&#8221;</p>

<p>Well, dear reader, you&#8217;ll be happy to know that&#8217;s not only possible but it&#8217;s actually one of the killer features of shadow DOM. Let&#8217;s keep going and I&#8217;ll show you how!</p>

<h2>Content <a href="#" id="content"></a></h2>

<h3>Sketch 2: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/02-content">content</a></h3>

<p>In our last two examples, we&#8217;ve completely replaced the content in our shadow hosts with whatever was inside our shadow root. While this is a neat trick, in practice, it&#8217;s not very useful. What would be really great is if we could take the <strong>content</strong> from our shadow host and then use the structure of the shadow root for <strong>presentation</strong>. Separating the content from the presentation like this allows us to be much more flexible with how our page actually renders.</p>

<p>First things first, to use the content in our shadow host we&#8217;re going to need to employ the new <code>&lt;content&gt;</code> tag. Here&#8217;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pokemon&quot;</span><span class="nt">&gt;</span>
    Jigglypuff
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;pokemon-template&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>A Wild <span class="nt">&lt;content&gt;&lt;/content&gt;</span> Appeared!<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/template&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.pokemon&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.pokemon-template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-content1.jpg" title="'Mixing content and presentation'" ></p>

<p>If you&#8217;ve been following along, this should look familiar. Using the <code>&lt;content&gt;</code> tag, we&#8217;ve created an <strong>insertion point</strong> that <strong>projects</strong> the text from the <code>.pokemon</code> div, so it appears within our shadow <code>&lt;h1&gt;</code>. Insertion points are very powerful because they allow us to change the order in which things render without physically altering the source. It also means that we can be selective about what gets rendered.</p>

<p>You may have noticed that we&#8217;re using a <a href="http://robdodson.me/blog/2013/03/16/html5-template-tag-introduction/">template tag</a> instead of building our shadow DOM entirely in JavaScript. I&#8217;ve found that using <code>&lt;template&gt;</code> tags makes the process of working with the shadow DOM much easier.</p>

<p>Let&#8217;s look at a more advanced example to demonstrate how to work with multiple insertion points.</p>

<h2>Selects <a href="#" id="selects"></a></h2>

<h3>Sketch 3: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/shadow-dom/03-selects">selects</a></h3>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;bio&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;first-name&quot;</span><span class="nt">&gt;</span>Rob<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;last-name&quot;</span><span class="nt">&gt;</span>Dodson<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;city&quot;</span><span class="nt">&gt;</span>San Francisco<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;state&quot;</span><span class="nt">&gt;</span>California<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;p&gt;</span>
      I specialize in Front-End development (HTML/CSS/JavaScript) with a touch of Node and Ruby sprinkled in. I’m also a writer and occasional daily blogger. Though I’m originally from the South, these days I live and work in beautiful San Francisco, California.
    <span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;bio-template&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;dl&gt;</span>
      <span class="nt">&lt;dt&gt;</span>First Name<span class="nt">&lt;/dt&gt;</span>
      <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.first-name&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
      <span class="nt">&lt;dt&gt;</span>Last Name<span class="nt">&lt;/dt&gt;</span>
      <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.last-name&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
      <span class="nt">&lt;dt&gt;</span>City<span class="nt">&lt;/dt&gt;</span>
      <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.city&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
      <span class="nt">&lt;dt&gt;</span>State<span class="nt">&lt;/dt&gt;</span>
      <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.state&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
    <span class="nt">&lt;/dl&gt;</span>
    <span class="nt">&lt;p&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/p&gt;</span>
  <span class="nt">&lt;/template&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">host</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.bio&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">host</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.bio-template&#39;</span><span class="p">);</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-selects1.jpg" title="'Using content selects'" ></p>

<p>In this example, we&#8217;re building a very simple biography widget. Because each definition field needs specific content, we have to tell the <code>&lt;content&gt;</code> tag to be selective about where things are inserted. To do this, we use the <code>select</code> attribute. The <code>select</code> attribute uses CSS selectors to pick out which items it wishes to display.</p>

<p>For instance, <code>&lt;content select=".last-name"&gt;</code> looks inside the shadow host for any element with a matching class of <code>.last-name</code>. If it finds a match, it will render its content inside of the shadow DOM.</p>

<h3>Changing Order</h3>

<p>As I mentioned before, insertion points allow us to change the rendering order of our presentation without needing to modify the structure of our content. <strong>Remember, the content is what lives in the shadow host and the presentation is what lives in the shadow root/shadow DOM.</strong> A good example would be to swap the rendering order of the first and last names.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;bio-template&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;dl&gt;</span>
    <span class="nt">&lt;dt&gt;</span>Last Name<span class="nt">&lt;/dt&gt;</span>
    <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.last-name&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
    <span class="nt">&lt;dt&gt;</span>First Name<span class="nt">&lt;/dt&gt;</span>
    <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.first-name&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
    <span class="nt">&lt;dt&gt;</span>City<span class="nt">&lt;/dt&gt;</span>
    <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.city&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
    <span class="nt">&lt;dt&gt;</span>State<span class="nt">&lt;/dt&gt;</span>
    <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.state&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
  <span class="nt">&lt;/dl&gt;</span>
  <span class="nt">&lt;p&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/p&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-selects2.jpg" title="'Changing the order of our selects'" ></p>

<p>By simply changing the structure of our <code>template</code>, we&#8217;ve altered the presentation, but the order of the content remains the same. To understand what I mean, take a look at the Chrome Dev Tools.</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-selects-inspect.jpg" title="'Changing the order of our selects'" ></p>

<p>As you can see, <code>.first-name</code> is still the first child in the shadow host, but we&#8217;ve made it appear as if it comes after <code>.last-name</code>. We did this by changing the order of our insertion points. That&#8217;s pretty powerful when you think about it.</p>

<h3>Greedy Insertion Points</h3>

<p>You may have noticed, at the end of the <code>.bio-template</code>, we have a <code>&lt;content&gt;</code> tag with an empty string inside of its <code>select</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;p&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/p&gt;</span>
</code></pre></figure>


<p>This is considered a wildcard selection and it will grab any content in the shadow host that is left over. The following three selections are all equivalent:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;content&gt;&lt;/content&gt;</span>
<span class="nt">&lt;conent</span> <span class="na">select=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/conent&gt;</span>
<span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;*&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</code></pre></figure>


<p>As an experiment, let&#8217;s move this wildcard selection to the top of our <code>template</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">&quot;bio-template&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/p&gt;</span>
  <span class="nt">&lt;dl&gt;</span>
    <span class="nt">&lt;dt&gt;</span>Last Name<span class="nt">&lt;/dt&gt;</span>
    <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.last-name&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
    <span class="nt">&lt;dt&gt;</span>First Name<span class="nt">&lt;/dt&gt;</span>
    <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.first-name&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
    <span class="nt">&lt;dt&gt;</span>City<span class="nt">&lt;/dt&gt;</span>
    <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.city&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
    <span class="nt">&lt;dt&gt;</span>State<span class="nt">&lt;/dt&gt;</span>
    <span class="nt">&lt;dd&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;.state&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/dd&gt;</span>
  <span class="nt">&lt;/dl&gt;</span>
<span class="nt">&lt;/template&gt;</span>
</code></pre></figure>


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/shadow-dom-selects3.jpg" title="'Overlly greedy selects'" ></p>

<p>You&#8217;ll notice that it completely changes the presentation of our widget by moving all content inside of the <code>&lt;p&gt;</code> tag. That&#8217;s because selections are greedy and items may only be selected one time. Since we have a wildcard selection at the top of our template, it grabs all of the content from the shadow host and doesn&#8217;t leave anything for the other <code>selects</code>.</p>

<p>Dominic Cooney (<a href="http://twitter.com/coonsta">@coonsta</a>) does a great job of describing this in his post on <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">Shadow DOM 101</a>. In it, he compares the selection process to party invitations.</p>

<blockquote><p>The content element is the invitation that lets content from the document into the backstage Shadow DOM rendering party. These invitations are delivered in order; who gets an invitation depends on to whom it is addressed (that is, the select attribute.) Content, once invited, always accepts the invitation (who wouldn’t?!) and off it goes. If a subsequent invitation is sent to that address again, well, nobody is home, and it doesn’t come to your party.</p></blockquote>


<p>Mastering selects and insertion points can be pretty tricky, so Eric Bidelman (<a href="http://twitter.com/ebidel">@ebidel</a>) created an <a href="http://html5-demos.appspot.com/static/shadowdom-visualizer/index.html">insertion point visualizer</a> to help illustrate the concepts.</p>

<p>He also created this handy video explaining it :)</p>

<iframe width="420" height="315" src="http://robdodson.me//www.youtube.com/embed/qnJ_s58ubxg" frameborder="0" allowfullscreen></iframe>


<h2>Conclusion <a href="#" id="conclusion"></a></h2>

<p>We still have a lot more to talk about, but for today, let&#8217;s wrap things up. Tomorrow, we&#8217;ll dig into CSS style encapsulation and later JavaScript and user interaction. As always, if you have questions <a href="http://twitter.com/rob_dodson">hit me up on twitter</a> or leave a comment. Thanks!</p>

<h2><a href="http://robdodson.me/blog/2013/08/28/shadow-dom-styles/">Continue to Shadow DOM: Styles &rarr;</a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadow DOM: Introduction]]></title>
    <link href="http://robdodson.me/blog/2013/08/26/shadow-dom-introduction/"/>
    <updated>2013-08-26T16:06:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/08/26/shadow-dom-introduction</id>
    <content type="html"><![CDATA[<p>The topic we&#8217;ll be covering today, Shadow DOM, is big and at times rather confusing. It is also, potentially, one of the most transformative things to happen to web development in at least the last 5-10 years. Rather than attempt to cover it all in one post I&#8217;m going to split it up into a series of articles spread out over the coming weeks.</p>

<p>For now let&#8217;s start with a general introduction: <strong>What</strong> is Shadow DOM and <strong>why</strong> is it important?</p>

<!--more-->


<h2>The What (Briefly) <a href="#" id="the-what"></a></h2>

<p>Perhaps Shadow DOM is best explained with an example, and no example is better than the new <code>&lt;video&gt;</code> tag. Consider the one below:</p>

<p><video id="video" controls="" preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png">
  <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4">
  <source id="webm" src="http://media.w3.org/2010/05/sintel/trailer.webm" type="video/webm">
  <source id="ogv" src="http://media.w3.org/2010/05/sintel/trailer.ogv" type="video/ogg">
</video></p>

<p>The markup for this video is quite simple.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;video</span> <span class="na">id=</span><span class="s">&quot;video&quot;</span> <span class="na">controls=</span><span class="s">&quot;&quot;</span> <span class="na">preload=</span><span class="s">&quot;none&quot;</span> <span class="na">poster=</span><span class="s">&quot;http://media.w3.org/2010/05/sintel/poster.png&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;source</span> <span class="na">id=</span><span class="s">&quot;mp4&quot;</span> <span class="na">src=</span><span class="s">&quot;http://media.w3.org/2010/05/sintel/trailer.mp4&quot;</span> <span class="na">type=</span><span class="s">&quot;video/mp4&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;source</span> <span class="na">id=</span><span class="s">&quot;webm&quot;</span> <span class="na">src=</span><span class="s">&quot;http://media.w3.org/2010/05/sintel/trailer.webm&quot;</span> <span class="na">type=</span><span class="s">&quot;video/webm&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;source</span> <span class="na">id=</span><span class="s">&quot;ogv&quot;</span> <span class="na">src=</span><span class="s">&quot;http://media.w3.org/2010/05/sintel/trailer.ogv&quot;</span> <span class="na">type=</span><span class="s">&quot;video/ogg&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;/video&gt;</span>
</code></pre></figure>


<p>Primarily there is a <code>&lt;video&gt;</code> tag with a few attributes and some nested <code>&lt;source&gt;</code> tags. But if you stop to think about it there&#8217;s actually <em>way</em> more going on here. The video player itself has play/pause buttons, a progress slider, a time code, volume controls and (once it is playing) a full screen toggle. So where is the code for all that?</p>

<h3>The Shadows</h3>

<p><a href="#" id="the-shadows"></a></p>

<p>As it turns out each browser vendor has already written the code to make our video player work. They&#8217;ve just hidden it from us using the <strong>Shadow DOM</strong>. If you open the Chrome Dev Tools and click the option to <code>Show Shadow DOM</code> you can then inspect the video player in more detail.</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/show-shadow-dom.jpg" title="'Enable Shadow DOM in the Dev Tools'" ></p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/video-shadow-dom.jpg" title="'Enable Shadow DOM in the Dev Tools'" ></p>

<p>Notice the grayed out <code>#document-fragment</code>? That&#8217;s where all of our video player controls actually live. The browsers gray this content out to indicate that it is inside the Shadow DOM and not available to the rest of the page. Meaning, you cannot write CSS selectors which accidentally target it and you cannot write JavaScript to dig around inside of it. Instead the player comes with a set of attributes which you can add to the <code>&lt;video&gt;</code> tag which will configure the player for you.</p>

<p><strong><em>So, what is the Shadow DOM?</em></strong>
In a nutshell Shadow DOM is a new part of the HTML spec which allows developers to encapsulate their HTML markup, CSS styles and JavaScript. Shadow DOM, along with a few other technologies which we&#8217;ll cover later, gives developers the ability to build their own 1st class tags and APIs just like the <code>&lt;video&gt;</code> or <code>&lt;audio&gt;</code> tag. Collectively, these new tags and APIs are referred to as <strong>Web Components</strong>.</p>

<h2>The Why <a href="#" id="the-why"></a></h2>

<p>If you&#8217;ve been developing web sites for a while you&#8217;ve probably heard of <a href="http://getbootstrap.com/">Bootstrap</a>. Bootstrap is a collection of UI components which comes with a set of style sheets, scripts and documented HTML patterns to tie it all together. Here is an example of the markup required for a Bootstrap <a href="http://getbootstrap.com/components/#navbar">navbar</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;navbar navbar-default navbar-fixed-top&quot;</span> <span class="na">role=</span><span class="s">&quot;navigation&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;navbar-header&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;navbar-toggle&quot;</span> <span class="na">data-toggle=</span><span class="s">&quot;collapse&quot;</span> <span class="na">data-target=</span><span class="s">&quot;.navbar-ex6-collapse&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;sr-only&quot;</span><span class="nt">&gt;</span>Toggle navigation<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;icon-bar&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
    <span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;navbar-brand&quot;</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Brand<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;collapse navbar-collapse navbar-ex6-collapse&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav navbar-nav&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;active&quot;</span><span class="nt">&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Contact<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/nav&gt;</span>
</code></pre></figure>


<p>Because there is no way to package Bootstrap components you must write out the HTML <em>exactly</em> as it is documented. Often times that means copying and pasting code from the Bootstrap docs into your application. While you are able to quickly build a page using this approach, it also means that much of the markup in your application is something you didn&#8217;t write and are not deeply familiar with. This can lead to all sorts of sneaky little bugs.</p>

<p>Consider also that the Bootstrap style sheet is ~6,600 lines long, meaning at any point you could accidentally override a crucial selector and blow up a portion of your page. Or that your JavaScript will have to coexist with the Bootstrap JavaScript and similarly respect its boundaries and never inadvertently trespass.</p>

<p><strong>It can be a lot to manage.</strong></p>

<p>And, of course, all of the above also applies to any 3rd party jQuery plugins, animation engines, charting libraries, modules, sprockets and widgets that are included in your application&#8230;</p>

<p>Let&#8217;s imagine, instead, that the Bootstrap navbar works exactly like the <code>&lt;video&gt;</code> tag from our previous example. Maybe it looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;bootstrap</span><span class="na">-navbar</span> <span class="na">fixed-top</span><span class="nt">&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Contact<span class="nt">&lt;/a&gt;</span>
<span class="err">&lt;</span>/bootstrap-navbar&gt;
</code></pre></figure>


<p><em>That does seem a bit easier to wrangle, right?</em></p>

<p>Until recently such a thing was not really possible. You&#8217;ve always been able to define your own tags in HTML but the browsers just treat them as <code>&lt;div&gt;</code>s and you get no special encapsulation benefits. If you <em>really</em> wanted privacy you could use <code>iframes</code> but <code>iframes</code> are bloated and often difficult to work with. With the introduction of Shadow DOM all of that changes.</p>

<p>I&#8217;m sure by now you&#8217;re tired of listening to me prattle on and you&#8217;re ready for some code! Follow me on to our next post where we&#8217;ll dive into Shadow DOM and walk through the basics.</p>

<h2><a href="http://robdodson.me/blog/2013/08/27/shadow-dom-the-basics/">Continue to Shadow DOM: Basics &rarr;</a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Components Resources]]></title>
    <link href="http://robdodson.me/blog/2013/08/22/web-components-resources/"/>
    <updated>2013-08-22T17:47:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/08/22/web-components-resources</id>
    <content type="html"><![CDATA[<p><a href="http://webcomponents.org">webcomponents.org</a> is an awesome, one-stop shop to help you get up to speed on Web Components. Go check it out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring HTML Imports]]></title>
    <link href="http://robdodson.me/blog/2013/08/20/exploring-html-imports/"/>
    <updated>2013-08-20T13:07:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/08/20/exploring-html-imports</id>
    <content type="html"><![CDATA[<p><a href="http://robdodson.me/blog/2013/03/17/why-web-components/">Web Components</a> have come a long way in the past few months and one of the technologies that I&#8217;m most interested in is <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/imports/index.html">HTML Imports</a> (or &#8220;imports&#8221;, for short). Imports allow you to load additional documents into your page without having to write a bunch of ajax. This is great for <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/custom/index.html">Custom Elements</a> where you might want to import a suite of new tags. I spent the day playing with imports and thought it would be useful to write up my progress.</p>

<!--more-->


<h2>The Lowdown</h2>

<p>Imports are a new type of <code>link</code> tag which should be familiar to you since that&#8217;s also how we load our stylesheets.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/path/to/styles.css&quot;</span><span class="nt">&gt;</span>
</code></pre></figure>


<p>For an import we just replace the <code>rel</code> with one of type <code>import</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;/path/to/some/import.html&quot;</span><span class="nt">&gt;</span>
</code></pre></figure>


<h2>Support</h2>

<p>Native imports are currently only available in Chrome. Be sure to check the <a href="http://caniuse.com/#feat=imports">support brackets on caniuse</a> to see if things have changed since the writing of this articel. Thankfully <a href="http://www.polymer-project.org/">Polymer</a> offers a polyfill in its <code>platform.js</code> file, if you want to try them out in other modern / &#8220;evergreen&#8221; browsers.</p>

<h2>Codez!</h2>

<p>I&#8217;ve created a sketchbook for this post and future Web Components related stuff. <a href="https://github.com/robdodson/webcomponents-sketchbook">You can grab the sketchbook on GitHub.</a> For each of the examples that I cover I&#8217;ll link to the sketch so you can quickly try things out.</p>

<p><em>Note: I&#8217;m in the process of updating this sketchbook. Please file an issue on Github if something seems broken.</em></p>

<h2>A Basic Example</h2>

<h3>Sketch 0: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/html-imports/0-basic">Basic</a></h3>

<p>OK so what&#8217;s a very basic import look like?</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Basic HTML Imports<span class="nt">&lt;/title&gt;</span>
    <span class="c">&lt;!-- Pull in our blog post example --&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;/imports/blog-post.html&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></figure>


<p>In its simplest form the import works just like calling a stylesheet. We have to make sure there&#8217;s a document to import so let&#8217;s create a fake blog post in <code>imports/blog-post.html</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;blog-post&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Awesome header<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;p&gt;</span>Here is some really interesting paragraph content.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></figure>


<p>To test, you&#8217;ll need to host your <code>index.html</code> and <code>imports/</code> folder on a local server. I recommend <a href="https://github.com/visionmedia/serve">serve</a> if you don&#8217;t already have one installed.</p>

<p>Once you have that setup visit your index page. If you take a look at the console you can see the request returning.</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/imports-console.jpg" title="'Our first HTML import!'" ></p>

<p>Well that&#8217;s cool, but now what?</p>

<p>Let&#8217;s grab the content of the import using some JavaScript and append it to the body. We&#8217;ll do this back in our <code>index.html</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;p&gt;</span>Hello World!<span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;link[rel=import]&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">link</span><span class="p">.</span><span class="kr">import</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#blog-post&#39;</span><span class="p">);</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre></figure>


<p>First we query the <code>link</code> tag which loaded our import. Then we extract our <code>#blog-post</code> element and store it in a variable called <code>content</code>. You&#8217;ll notice that we don&#8217;t have to write any event handler code to wait till the import has loaded, we can just assume the content is there and start working with it. Finally we add the new content to our <code>body</code>.</p>

<p>If you&#8217;re following along you should end up with something like this:</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/imports-screen1.jpg" title="'Basic Import Example'" ></p>

<p>Exciting, I know ;) But it demonstrates a no frills approach to loading content that doesn&#8217;t require ajax and writing our own event handlers. Let&#8217;s keep digging to see what else we find&#8230;</p>

<h2>A Basic Example with Polymer</h2>

<h3>Sketch 1: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/html-imports/1-basic-polymer">Basic-Polymer</a></h3>

<p>If you want to try out the snippets above in a browser other than Chrome you&#8217;ll need to use Google&#8217;s <a href="http://www.polymer-project.org/">Polymer Project</a>. Polymer is a collection of polyfills and additional sugars which seeks to enable the use of Web Components in all modern browsers. The hope is that devolopers will use Polymer to inform the W3C on which direction to take with Web Components; so rather than wait for a stinky spec we can guide the implementation process.</p>

<p>Polymer attempts to keep parity with the the evolving specifications but obviously there are some places where the API must differ because of the limitations of current browsers. In the case of HTML Imports, Polymer waits for the <code>DOMContentLoaded</code> event before triggering the actual import process. This means we need to listen for the <code>HTMLImportsLoaded</code> event on either <code>window</code> or <code>document</code> to know when it is finished. Let&#8217;s add that to our <code>index.html</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Basic HTML Imports<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;/imports/blog-post.html&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello World!<span class="nt">&lt;/p&gt;</span>

    <span class="c">&lt;!-- Include platform.js --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/bower_components/platform/platform.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>

    <span class="c">&lt;!-- Listen for the HTMLImportsLoaded event --&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;HTMLImportsLoaded&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">link</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;link[rel=import]&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">link</span><span class="p">.</span><span class="kr">import</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#blog-post&#39;</span><span class="p">);</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
      <span class="p">});</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></figure>


<p>Using the above we should get the same results as before.</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/imports-screen1.jpg" title="'Basic Import Example with Polymer'" ></p>

<p>You might notice that I used <code>platform.js</code> instead of only including the <a href="http://www.polymer-project.org/platform/html-imports.html">HTML Imports polyfill</a>. Polymer&#8217;s collection of polyfills, referred to as &#8220;The Platform,&#8221; is structured so you can take any of the polyfills &agrave; la carte but I find it&#8217;s easier to just include the entire platform when I&#8217;m experimenting, rather than worry if I have each individual polyfill loaded. That&#8217;s just personal preference (a.k.a. I&#8217;m lazy).</p>

<h2>Using Scoped Styles in our Imports</h2>

<p><em>04/30/14 Note: It&#8217;s my understanding that scoped styles are being removed in favor of Shadow DOM so I&#8217;m removing this section</em></p>

<h2>Using Scripts in our Imports</h2>

<h3>Sketch 3: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/html-imports/3-script">Script</a></h3>

<p>Next let&#8217;s look at using <code>&lt;script&gt;</code> tags inside of our import. We&#8217;ll start by removing the <code>&lt;script&gt;</code> block from our <code>index.html</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Basic HTML Imports<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;/imports/blog-post.html&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Boring header<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>Hello World!<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></figure>


<p>Then we&#8217;ll transfer that script block over to our blog post in <code>imports/blog-post.html</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;blog-post&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;style&gt;</span>
    <span class="nt">h1</span> <span class="p">{</span>
      <span class="k">background</span><span class="o">:</span> <span class="nb">lightgreen</span><span class="p">;</span>
      <span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
      <span class="k">font-family</span><span class="o">:</span> <span class="n">Helvetica</span><span class="o">,</span> <span class="n">Arial</span><span class="o">,</span> <span class="k">sans-serif</span><span class="p">;</span>
      <span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
      <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="nt">&lt;/style&gt;</span>

  <span class="nt">&lt;h1&gt;</span>Awesome header<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;p&gt;</span>
    Here is some really interesting paragraph content.
    It comes with its own stylesheet!
  <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>

<span class="nt">&lt;script&gt;</span>
  <span class="c1">// thisDoc refers to the &quot;importee&quot;, which is blog-post.html</span>
  <span class="kd">var</span> <span class="nx">thisDoc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">currentScript</span><span class="p">.</span><span class="nx">ownerDocument</span><span class="p">;</span>

  <span class="c1">// thatDoc refers to the &quot;importer&quot;, which is index.html</span>
  <span class="kd">var</span> <span class="nx">thatDoc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">;</span>

  <span class="c1">// grab the contents of the #blog-post from this document</span>
  <span class="c1">// and append it to the importing document.</span>
  <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">thisDoc</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#blog-post&#39;</span><span class="p">);</span>
  <span class="nx">thatDoc</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">thatDoc</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></figure>


<p>If we run this we should get the exact same outcome as before.</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/imports-screen2.jpg" title="'Imports with Styles'" ></p>

<p>An important thing to take notice of is the relationship between <code>thisDoc</code> and <code>thatDoc</code>. <code>thisDoc</code> refers to the <code>blog-post.html</code> document, while <code>thatDoc</code> refers to our <code>index.html</code> file. It&#8217;s useful to distinguish between the two so we can <code>querySelector</code> for <code>#blog-post</code> and not worry that we may have grabbed something out of the importing document. <em>Thanks to <a href="https://twitter.com/coonsta">Dominic Cooney</a> for the heads up on this.</em></p>

<p>You&#8217;ll also notice that since the import has access to our <code>document</code> object it is able to add itself to the page. In practice you probably wouldn&#8217;t want imports adding themselves wherever, but the important takeaway is that <strong>anything imported can access the <code>document</code></strong>. This means an import could register itself as a Custom Element using our <code>document</code> object and we wouldn&#8217;t need to write any additional code. We&#8217;re almost to that point so let&#8217;s keep going&#8230;</p>

<h2>Using Templates in our Imports</h2>

<h3>Sketch 4: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/html-imports/4-template">Template</a></h3>

<p>I&#8217;m getting a little tired of our fake &#8220;blog post&#8221; so let&#8217;s switch over to something more practical. We&#8217;ll use <a href="http://www.chartjs.org/">Chart.js</a> to create a very simple pie diagram and we&#8217;ll use the new <code>&lt;template&gt;</code> tag to hold the contents of our import. If you haven&#8217;t heard of the template tag before <a href="http://robdodson.me/blog/2013/03/16/html5-template-tag-introduction/">checkout this introduction</a>.</p>

<p>To start, I&#8217;ve updated the <code>index.html</code> so it includes Chart.js and imports a new <code>chart.html</code> file.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Imports with Templates<span class="nt">&lt;/title&gt;</span>
    <span class="c">&lt;!-- Make sure to import chart.html --&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;/imports/chart.html&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Quarterly Pokemon Sales<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></figure>


<p>Here&#8217;s what <code>imports/chart.html</code> looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="c">&lt;!-- Include Chart.js so our import can use it --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/lib/Chart.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;template</span> <span class="na">id=</span><span class="s">&quot;chart-pie&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;myChart&quot;</span> <span class="na">width=</span><span class="s">&quot;200&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
  <span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
        <span class="nx">color</span><span class="o">:</span><span class="s2">&quot;#F38630&quot;</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="nx">value</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
        <span class="nx">color</span> <span class="o">:</span> <span class="s2">&quot;#E0E4CC&quot;</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="nx">value</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
        <span class="nx">color</span> <span class="o">:</span> <span class="s2">&quot;#69D2E7&quot;</span>
      <span class="p">}</span>
    <span class="p">];</span>

    <span class="c1">// Get the context of the canvas element we want to select</span>
    <span class="c1">// It&#39;s ok to use document here because this script block won&#39;t</span>
    <span class="c1">// activate till it&#39;s added to the page.</span>
    <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;myChart&quot;</span><span class="p">).</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">myNewChart</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chart</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nx">Pie</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/template&gt;</span>

<span class="nt">&lt;script&gt;</span>
  <span class="c1">// thisDoc refers to the &quot;importee&quot;, which is chart.html</span>
  <span class="kd">var</span> <span class="nx">thisDoc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">currentScript</span><span class="p">.</span><span class="nx">ownerDocument</span><span class="p">;</span>

  <span class="c1">// thatDoc refers to the &quot;importer&quot;, which is index.html</span>
  <span class="kd">var</span> <span class="nx">thatDoc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">;</span>

  <span class="c1">// grab the contents of #chart-pie from this document</span>
  <span class="c1">// and append it to the importing document.</span>
  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">thisDoc</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;#chart-pie&quot;</span><span class="p">);</span>
  <span class="nx">thatDoc</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">thatDoc</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></figure>


<p>We&#8217;re creating a new <code>&lt;template&gt;</code> which contains a canvas tag and a script block to create our pie chart. The advantage of using a template tag is that any script blocks inside of it will not execute until we clone the contents and add them to the DOM.</p>

<p>Running the above gives us this:</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/imports-template.jpg" title="'Imports with Template'" ></p>

<p>Well this is interesting. We&#8217;re importing an entire pie chart and our index page isn&#8217;t cluttered with a bunch of code. Unfortunately we don&#8217;t have much control over where the pie chart ends up. It would be nice if we could turn the contents of the import into a tag and place that wherever. Thankfully Custom Elements let us do just that!</p>

<h2>Using Custom Elements in our Imports</h2>

<h3>Sketch 5: <a href="https://github.com/robdodson/webcomponents-sketchbook/tree/master/html-imports/5-custom-element">Custom Element</a></h3>

<p>I&#8217;ll say in advance that you might need to read through this section a few times before you fully grok it. We&#8217;re going to touch on a lot of new stuff so consider this the bonus round :)</p>

<p>The final markup for our <code>index.html</code> file is going to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Imports with Custom Elements<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;/imports/chart.html&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Quarterly Pokemon Sales<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;chart</span><span class="na">-pie</span><span class="nt">&gt;</span><span class="err">&lt;</span>/chart-pie&gt;
    <span class="nt">&lt;chart</span><span class="na">-pie</span><span class="nt">&gt;</span><span class="err">&lt;</span>/chart-pie&gt;
    <span class="nt">&lt;chart</span><span class="na">-pie</span><span class="nt">&gt;</span><span class="err">&lt;</span>/chart-pie&gt;
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></figure>


<p>We&#8217;re going to use our new Custom Element, <code>chart-pie</code>, which will allow us to produce pie charts wherever we want. The result will look like this:</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/imports-custom-elements.jpg" title="'Imports with Custom Elements'" ></p>

<p>Obviously not the most amazing thing ever but from a practical perspective being able to drop a pie chart on your page with one line of HTML is pretty sweet.</p>

<p>To create the <code>chart-pie</code> tag we&#8217;ll need to create a <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/custom/index.html">Custom Element</a>. Custom Elements are new tags with a lifecycle of JavaScript callbacks. Typically they use <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">Shadow DOM</a> to hide their internal markup and expose attributes and specific styles to the client. <a href="http://robdodson.me/blog/2013/03/17/why-web-components/">I wrote an article loosely explaining them</a> a while back so take a look at that and also checkout <a href="http://www.youtube.com/watch?v=fqULJBBEVQE">this talk by Eric Bidelman</a>.</p>

<p>Here&#8217;s what our updated <code>imports/chart.html</code> looks like.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/lib/Chart.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;template</span> <span class="na">id=</span><span class="s">&quot;chart-pie&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;canvas</span> <span class="na">class=</span><span class="s">&quot;myChart&quot;</span> <span class="na">width=</span><span class="s">&quot;200&quot;</span> <span class="na">height=</span><span class="s">&quot;200&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
<span class="nt">&lt;/template&gt;</span>

<span class="nt">&lt;script&gt;</span>
  <span class="c1">// thisDoc refers to the &quot;importee&quot;, which is chart.html</span>
  <span class="kd">var</span> <span class="nx">thisDoc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">currentScript</span><span class="p">.</span><span class="nx">ownerDocument</span><span class="p">;</span>

  <span class="c1">// thatDoc refers to the &quot;importer&quot;, which is index.html</span>
  <span class="kd">var</span> <span class="nx">thatDoc</span> <span class="o">=</span> <span class="nb">document</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">template</span> <span class="o">=</span> <span class="nx">thisDoc</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;#chart-pie&#39;</span><span class="p">);</span>

  <span class="c1">// Make sure you extend an existing HTMLElement prototype</span>
  <span class="kd">var</span> <span class="nx">ChartPieProto</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">HTMLElement</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>

  <span class="c1">// Setup optional lifecycle callbacks: createdCallback,</span>
  <span class="c1">// enteredDocumentCallback, leftDocumentCallback and</span>
  <span class="c1">// attributeChangedCallback</span>
  <span class="nx">ChartPieProto</span><span class="p">.</span><span class="nx">createdCallback</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Create a ShadowDOM to hold our template content</span>
    <span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">createShadowRoot</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">clone</span> <span class="o">=</span> <span class="nx">thatDoc</span><span class="p">.</span><span class="nx">importNode</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>

    <span class="c1">// Create the pie chart with Chart.js</span>
    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="nx">value</span><span class="o">:</span> <span class="mi">30</span><span class="p">,</span>
        <span class="nx">color</span><span class="o">:</span><span class="s2">&quot;#F38630&quot;</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="nx">value</span> <span class="o">:</span> <span class="mi">50</span><span class="p">,</span>
        <span class="nx">color</span> <span class="o">:</span> <span class="s2">&quot;#E0E4CC&quot;</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="nx">value</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
        <span class="nx">color</span> <span class="o">:</span> <span class="s2">&quot;#69D2E7&quot;</span>
      <span class="p">}</span>
    <span class="p">];</span>

    <span class="c1">//Get the context of the canvas element we want to select</span>
    <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">clone</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.myChart&#39;</span><span class="p">).</span><span class="nx">getContext</span><span class="p">(</span><span class="s1">&#39;2d&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">myNewChart</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chart</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nx">Pie</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>

    <span class="c1">// Add the template content + chart to our Shadow DOM</span>
    <span class="nx">root</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">clone</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">var</span> <span class="nx">ChartPie</span> <span class="o">=</span> <span class="nx">thatDoc</span><span class="p">.</span><span class="nx">registerElement</span><span class="p">(</span><span class="s1">&#39;chart-pie&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">prototype</span><span class="o">:</span> <span class="nx">ChartPieProto</span><span class="p">});</span>
  <span class="c1">//var chartPie = new ChartPie();</span>
  <span class="c1">//var chartPie = document.createElement(&#39;chart-pie&#39;);</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre></figure>


<p>Let&#8217;s walk through it piece by piece.</p>

<pre><code>&lt;template id="chart-pie"&gt;
  &lt;canvas class="myChart" width="200" height="200"&gt;&lt;/canvas&gt;
&lt;/template&gt;
</code></pre>

<p>On lines 1-3 we&#8217;ve shortened the <code>template</code> down so that it only contains our <code>canvas</code> tag. We&#8217;ll use the Custom Element <code>createdCallback</code> to actually instantiate the chart in here.</p>

<pre><code>// thisDoc refers to the "importee", which is chart.html
var thisDoc = document.currentScript.ownerDocument;

// thatDoc refers to the "importer", which is index.html
var thatDoc = document;

var template = thisDoc.querySelector('#chart-pie');
</code></pre>

<p>Lines 6-12 should look familar from the last example. We&#8217;re storing our two documents in variables and querying for the template tag.</p>

<pre><code>var ChartPieProto = Object.create(HTMLElement.prototype);
</code></pre>

<p>On line 15 we define the prototype for our Custom Element called <code>ChartPieProto</code>. This prototype extends the <code>HTMLElement</code> prototype which is a requirement for creating a new element.</p>

<pre><code>ChartPieProto.createdCallback = function() {
  ...
};
</code></pre>

<p>On line 20 we see the first lifecycle callback, <code>createdCallback</code>. The <code>createdCallback</code> is run every time the parser hits a new instance of our tag. Therefore we can use it as a kind of constructor to kickoff the creation of our chart. We&#8217;ll want to create a new chart instance for each tag so all of our Chart.js code has been moved inside of this callback.</p>

<pre><code>var root = this.createShadowRoot();
var clone = thatDoc.importNode(template.content, true);
</code></pre>

<p>On lines 22-23 we create a <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">Shadow DOM</a> to hold the markup for our chart.</p>

<pre><code>var data = [
  {
    value: 30,
    color:"#F38630"
  },
  {
    value : 50,
    color : "#E0E4CC"
  },
  {
    value : 100,
    color : "#69D2E7"
  }
];

//Get the context of the canvas element we want to select
var ctx = clone.querySelector('.myChart').getContext('2d');
var myNewChart = new Chart(ctx).Pie(data);
</code></pre>

<p>Lines 26-43 should look familiar. It&#8217;s the same Chart.js code from before except now we use <code>querySelector</code> to find the contents of the template clone and we&#8217;re using a class for <code>myChart</code> instead of an id.</p>

<pre><code>root.appendChild(clone);
</code></pre>

<p>On line 46 we add the new content to our Shadow DOM.</p>

<pre><code>var ChartPie = thatDoc.registerElement('chart-pie', {prototype: ChartPieProto});
</code></pre>

<p>Line 49 is where we actually register our Custom Element and assign it to the name <code>chart-pie</code>. From here you can either place a <code>&lt;chart-pie&gt;&lt;/chart-pie&gt;</code> tag somewhere on your page, or use JavaScript to instantiate an instance and add it to the <code>document</code>. This is demonstrated in the comments on lines 50-51. If you refer back to our <code>index.html</code> example we just use the <code>&lt;chart-pie&gt;</code> tag.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Imports with Custom Elements<span class="nt">&lt;/title&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;/imports/chart.html&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Quarterly Pokemon Sales<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;chart</span><span class="na">-pie</span><span class="nt">&gt;</span><span class="err">&lt;</span>/chart-pie&gt;
    <span class="nt">&lt;chart</span><span class="na">-pie</span><span class="nt">&gt;</span><span class="err">&lt;</span>/chart-pie&gt;
    <span class="nt">&lt;chart</span><span class="na">-pie</span><span class="nt">&gt;</span><span class="err">&lt;</span>/chart-pie&gt;
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></figure>


<p>Which produces this:</p>

<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/imports-custom-elements.jpg" title="'Imports with Custom Elements'" ></p>

<h2>Conclusion</h2>

<p>If you&#8217;ve made it this far congrats and thanks for hanging in there! I know that last section was a little crazy but stop for a moment and think about what we just did.</p>

<p>By using an HTML Import we were able to pull in a document which added a new tag to our application. Imagine if <em>all</em> of Chart.js was written in this manner. There would be no need for us to write any glue code to generate a chart ever again. That would allow us to focus only on the code that matters to our application, and leave all that other boilerplate tucked away inside of Custom Elements.</p>

<p>Over the next few months I&#8217;ll be blogging exclusively about this topic because I think it&#8217;s really interesting so check back later for more!</p>

<p>Till then make sure to <a href="http://twitter.com/rob_dodson">hit me up on Twitter</a> if you have any questions or leave a note in the comments. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nth-child is weird]]></title>
    <link href="http://robdodson.me/blog/2013/08/04/nth-child-is-weird/"/>
    <updated>2013-08-04T10:55:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/08/04/nth-child-is-weird</id>
    <content type="html"><![CDATA[<p>I ran into a CSS bug today and it brought up an interesting (and important) question: What&#8217;s the difference between <code>nth-child</code> and <code>nth-of-type</code>?</p>

<!--more-->


<h2>Comparing two things or one</h2>

<p>Take a look at this sample code to get a feel for what we&#8217;re talking about.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;p&gt;</span>This paragraph is not green :(<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>This paragraph is green!<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></figure>




<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">p</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></figure>


<p>You&#8217;ll notice that we&#8217;re setting our second <code>p</code> element to have a <code>background-color</code> of <code>green</code>. To do this we use <code>p:nth-child(2)</code>. I think the way most people (myself included) would read that selector is &#8220;select the second child paragraph&#8221;. But if we change the markup to look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;div&gt;</span>
  <span class="nt">&lt;h1&gt;</span>Hello World!<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;p&gt;</span>This paragraph is not green :(<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;p&gt;</span>This paragraph is green!<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></figure>


<p>Suddenly our green background moves to the wrong element. What gives?! As it turns out, <code>nth-child</code> counts all child elements regardless of what tag they are using.</p>

<p>As <a href="http://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/">Chris Coyier puts it on CSS-Tricks.</a></p>

<blockquote><p>Our :nth-child selector, in &#8220;Plain English,&#8221; means select an element *if*:</p><p>It is a paragraph element<br/>It is the second child of a parent</p></blockquote>


<p>Since we&#8217;ve added another child in the form of an <code>h1</code> tag, we need to now say <code>p:nth-child(3)</code> if we want to select the same element. In my mind that makes the <code>nth-child</code> tag extremely brittle and somewhat counterintuitive.</p>

<p>Thankfully there&#8217;s an alternative in form of the <code>nth-of-type</code> selector.</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">p</span><span class="nd">:nth-of-type</span><span class="o">(</span><span class="nt">2</span><span class="o">)</span> <span class="p">{</span>
  <span class="k">background-color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></figure>


<p>Again, quoting <a href="http://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/">Mr. Coyier</a>:</p>

<blockquote><p>Our :nth-of-type selector, in &#8220;Plain English,&#8221; means:</p><p>Select the second paragraph child of a parent</p></blockquote>


<p>So <code>nth-of-type</code> gives us the functionality we were originally looking for and doesn&#8217;t require us to change our markup if we add additional child elements which use different tags. That&#8217;s pretty sweet. I wonder why I don&#8217;t see <code>nth-of-type</code> used as often? It looks like they&#8217;re both supported in Chrome/FF and IE9+. Maybe it&#8217;s because <code>nth-child</code> initially seems easier to reason about although in actuality it&#8217;s a little more complex.</p>

<p>If you want to play around with the idea <a href="http://codepen.io/robdodson/pen/GzuKH">I&#8217;ve put together a codepen.</a> Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome/Blink devs discuss setImmediate]]></title>
    <link href="http://robdodson.me/blog/2013/07/29/chrome-slash-blink-devs-discuss-setimmediate/"/>
    <updated>2013-07-29T09:05:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/07/29/chrome-slash-blink-devs-discuss-setimmediate</id>
    <content type="html"><![CDATA[<p>Really interesting discussion of the pros and cons of the <code>setImmediate</code> function. For a little backstory checkout <a href="http://www.nczonline.net/blog/2013/07/09/the-case-for-setimmediate/">this post</a> by <a href="http://www.nczonline.net/blog/">Nicholas Zakas</a> (<a href="http://twitter.com/slicknet">@slicknet</a>)</p>

<p>Here&#8217;s a nice tidbit from one of the Chrome devs:</p>

<blockquote><p>To perform work immediately before the next display - for example to batch up graphical updates as data is streamed in off the network - just make a one-off `requestAnimationFrame()` call.  To perform work immediately -after- a display, just call `setTimeout()` from inside the `requestAnimationFrame()` handler.</p></blockquote>


<p><a href="https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/Hn3GxRLXmR0">The full thread is available here.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scared Shitless]]></title>
    <link href="http://robdodson.me/blog/2013/07/29/scared-shitless/"/>
    <updated>2013-07-29T08:51:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/07/29/scared-shitless</id>
    <content type="html"><![CDATA[<p>I just saw this awesome talk by <a href="http://www.43folders.com/">Merlin Mann</a> (<a href="https://twitter.com/hotdogsladies">@hotdogsladies</a>) titled <strong>Scared Shitless</strong>.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Lk0hSeQ5s_k "></iframe></div>


<p>If there&#8217;s something you want to do but you&#8217;ve been too scared to do it maybe you should watch this. Get a little courage. Get some gumption! And do the damn thing! ROOOOOAAAAR!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RequireJS -- Embracing the Awesomness of AMD Modules]]></title>
    <link href="http://robdodson.me/blog/2013/03/21/requirejs-embracing-the-awesomness-of-amd-modules/"/>
    <updated>2013-03-21T21:57:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/03/21/requirejs-embracing-the-awesomness-of-amd-modules</id>
    <content type="html"><![CDATA[<p>Over the past few weeks I put together this talk for my team at GE to help get everyone on the same page with AMD modules. I figured it&#8217;d be cool if I removed any GE specific stuff and open sourced the presentation, so here it is!</p>

<p>The video is around 35 minutes long and there&#8217;s a slide deck available on Github that has clickable links and whatnot. Enjoy!</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/vWGuaZOTR4U" frameborder="0" allowfullscreen></iframe>


<p><a href="https://github.com/robdodson/requirejs-presentation">Slidedeck on Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Web Components?]]></title>
    <link href="http://robdodson.me/blog/2013/03/17/why-web-components/"/>
    <updated>2013-03-17T17:48:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/03/17/why-web-components</id>
    <content type="html"><![CDATA[<p>Yesterday I did a post on the HTML5 <code>&lt;template&gt;</code> tag which is part of the new <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html#custom-element-section">Web Components standard.</a> I didn&#8217;t go into a ton of explanation as to why I&#8217;m so interested with this spec and I think jumping right to the <code>&lt;template&gt;</code> tag was probably pretty confusing for folks who don&#8217;t have the same needs as me. I want to back up a bit and present a high level overview of Web Components and then illustrate why this is such an important concept.</p>

<!--more-->


<h2>So, what are Web Components?</h2>

<p>Web Components are actually a group of standards which all fall under the same umbrella. The W3C does a good job of giving a high level overview in their <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html">Introduction to Web Components</a> article. <em>update 08/27/14: for various reasons this document is now deprecated but the high level overview is still useful</em>.</p>

<p style="text-align: center;">**</p>


<p>&#8220;The component model for the Web (also known as Web Components) consists of four pieces designed to be used together <strong>to let web application authors define widgets with a level of visual richness not possible with CSS alone, and ease of composition and reuse not possible with script libraries today.</strong></p>

<p>These pieces are:</p>

<ul>
<li><p><strong>Templates</strong>, which define chunks of markup that are inert but can be activated for use later;</p></li>
<li><p><strong>Custom Elements</strong>, which let authors define their own elements, including new presentation and API, that can be used in HTML documents; and</p></li>
<li><p><strong>Shadow DOM</strong> which defines how presentation and behavior of decorators and custom elements fit together in the DOM tree.</p></li>
<li><p><strong>HTML Imports</strong> provide a way to include and reuse HTML documents in other HTML documents.</p></li>
</ul>


<p style="text-align: center;">**</p>


<p><strong>Custom elements</strong> let you define new <a href="https://developer.mozilla.org/en-US/docs/DOM/HTMLElement">HTMLElements</a>, kind of like creating new tags. Custom elements leverage <strong>templates</strong> and <strong>shadow DOM</strong> to encapsulate their markup and styles, and often are loaded into an application via <strong>HTML imports</strong>.</p>

<p>To visualize this process think about the iframe that holds a Facebook Like button. The Like button encapsulates all of its markup and styles inside the iframe so it doesn&#8217;t mess up anything on your page. Unfortunately there are a few downsides to this approach. For starters you have to make an http request to load the content of the iframe, so you would never want to build your entire site out of iframe&#8217;d components. Also, the Like button doesn&#8217;t expose much of an API for you to change its appearance. While that&#8217;s not a huge deal for a Facebook Like button, it is if you&#8217;re using a more generic component like a slider or dropdown.</p>

<p>In an ideal world you could have a <em>framework</em> of components which hide their markup but expose an API to alter their appearance. Imagine if this:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="c">&lt;!-- Bootstrap Dropdown --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;dropdown&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;dropdown-menu&quot;</span> <span class="na">role=</span><span class="s">&quot;menu&quot;</span> <span class="na">aria-labelledby=</span><span class="s">&quot;dLabel&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">tabindex=</span><span class="s">&quot;-1&quot;</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Action<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">tabindex=</span><span class="s">&quot;-1&quot;</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Another action<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">tabindex=</span><span class="s">&quot;-1&quot;</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Something else here<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></figure>


<p>was just this:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;fancy</span><span class="na">-dropdown</span><span class="nt">&gt;</span><span class="err">&lt;</span>/fancy-dropdown&gt;
</code></pre></figure>


<p>and you&#8217;re most of the way there.</p>

<p>At present we have the <code>&lt;video&gt;</code> tag which basically uses all of the technologies listed above. Do you care what its template and shadow DOM look like? Not really. You just want to say:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;video</span> <span class="na">autoplay=</span><span class="s">&quot;true&quot;</span> <span class="na">controls</span> <span class="na">src=</span><span class="s">&quot;path/to/video&quot;</span><span class="nt">&gt;</span>
</code></pre></figure>


<p>to spit out your awesome player. Think of the cognitive load that you could unburden yourself of if <em>all</em> UI Frameworks had the same abilities as <code>&lt;video&gt;</code>!</p>

<p>A page might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><pre><code><span class="nt">&lt;bootstrap</span><span class="na">-navbar</span> <span class="na">sticky</span><span class="nt">&gt;</span><span class="err">&lt;</span>/bootstrap-navbar&gt;
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span> <span class="na">role=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
  <span class="c">&lt;!-- mixing Foundation and Bootstrap! --&gt;</span>
  <span class="nt">&lt;foundation</span><span class="na">-alert</span> <span class="na">success</span><span class="nt">&gt;</span>Hey you succeeded!<span class="err">&lt;</span>/foundation-alert&gt;
  <span class="nt">&lt;table</span> <span class="na">is=</span><span class="s">&quot;x-datatables&quot;</span> <span class="na">ascending</span> <span class="na">src=</span><span class="s">&quot;path/to/data.json&quot;</span><span class="nt">&gt;&lt;/table&gt;</span>
  <span class="nt">&lt;bootstrap</span><span class="na">-pagination</span><span class="nt">&gt;</span><span class="err">&lt;</span>/bootstrap-pagination&gt;
<span class="nt">&lt;/section&gt;</span>
<span class="nt">&lt;bootstrap</span><span class="na">-footer</span><span class="nt">&gt;</span><span class="err">&lt;</span>/bootstrap-footer&gt;
</code></pre></figure>


<p>instead of hundreds of lines of markup rubber stamped over and over again. Even if you take the repetative markup and place it inside a template engine like handlebars you still can&#8217;t mix and match UI Frameworks like Bootstrap and Foundation without running into some serious risks. Web Components hope to solve both of these problems and open up a much more declarative authoring process.</p>

<p>Hopefully tomorrow I can dig into Custom Elements more and provide some concrete examples knitting all of these concepts together. Thanks for reading!</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here</a>.</p>
]]></content>
  </entry>
  
</feed>
