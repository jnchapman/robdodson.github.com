<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Polymer | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/polymer/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2014-08-27T19:57:36-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shadow DOM CSS Cheat Sheet]]></title>
    <link href="http://robdodson.me/blog/2014/04/10/shadow-dom-css-cheat-sheet/"/>
    <updated>2014-04-10T22:56:00-07:00</updated>
    <id>http://robdodson.me/blog/2014/04/10/shadow-dom-css-cheat-sheet</id>
    <content type="html"><![CDATA[<p>This guide is my attempt to track the progress of all the new CSS selectors which affect the Shadow DOM. I've written this from the perspective of someone who uses <a href="http://polymer-project.org">Polymer</a> so in a few places I point out polyfill features like <code>shim-shadowdom</code> and <code>polyfill-next-selector</code>. But the selectors themselves are all native and comply to <a href="http://drafts.csswg.org/css-scoping/">the current draft spec</a>.</p>

<!-- more -->


<p>Found a bug? <a href="https://github.com/robdodson/robdodson.github.com/blob/source/source/_posts/2014-04-10-shadow-dom-css-cheat-sheet.markdown">Submit a pull request!</a></p>

<p>Follow <a href="http://twitter.com/rob_dodson">@rob_dodson on the twitters</a></p>

<br>


<br>




<h2><a href="#shadow" id="shadow" class="no-underline">::shadow</a></h2>


<p>Selects shadow trees that are one level deep inside of an element. Will need to be combined with <code>shim-shadowdom</code> directive if used outside of a Polymer element in browsers that lack support for the native selector.</p>

<p><code>
x-foo::shadow h1 {
  color: red;
}
</code>
<a href="http://codepen.io/robdodson/pen/HeLEb">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-shadow">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#deep" id="deep" class="no-underline">/deep/</a></h2>


<p>Selects shadow trees that are N levels deep inside of an element. Will need to be combined with <code>shim-shadowdom</code> directive if used outside of a Polymer element in browsers that lack support for the native selector.</p>

<p><code>
x-foo /deep/ h1 {
  color: red;
}
</code>
<a href="http://codepen.io/robdodson/pen/wraDn/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-deep">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#host" id="host" class="no-underline">:host</a></h2>


<p>Selects a shadow host element. May contain additional identifiers in parenthesis.</p>

<p><code>
:host(.fancy) {
  display: inline-block;
  background: purple;
}
</code>
<a href="http://codepen.io/robdodson/pen/rDuyJ/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-host0">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#host-context" id="host-context" class="no-underline">:host-context</a></h2>


<p>Selects a shadow host based on a matching parent element.</p>

<p><code>
:host-context(.blocky) {
  display: block
  background: red;
}
</code>
<a href="http://codepen.io/robdodson/pen/ftpoG/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-host-context">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#content" id="content" class="no-underline">::content</a></h2>


<p>Selects distributed nodes inside of an element. Needs to be paired with <code>polyfill-next-selector</code> for browsers that do not support the native selector.</p>

<p><code>
::content h1 {
  color: red;
}
</code>
<a href="http://codepen.io/robdodson/pen/FokEw/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-content">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Bower and Polymer]]></title>
    <link href="http://robdodson.me/blog/2014/03/29/setting-up-bower-and-polymer/"/>
    <updated>2014-03-29T16:17:00-07:00</updated>
    <id>http://robdodson.me/blog/2014/03/29/setting-up-bower-and-polymer</id>
    <content type="html"><![CDATA[<p>So, you're ready to dive into Polymer but you're not so sure about this whole Bower thing. Have no fear! In this short screencast I'll walk you through installing Bower, creating a project with the <code>bower init</code> command, and building your first Polymer element.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/1rz334A8U7o "></iframe></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@font-face doesn't work in the Shadow DOM]]></title>
    <link href="http://robdodson.me/blog/2013/11/19/at-font-face-doesnt-work-in-shadow-dom/"/>
    <updated>2013-11-19T09:27:00-08:00</updated>
    <id>http://robdodson.me/blog/2013/11/19/at-font-face-doesnt-work-in-shadow-dom</id>
    <content type="html"><![CDATA[<p>I was building custom elements with Polymer the other day, and I thought it would be cool to include Font Awesome for some sweet icon goodness. Everything was going great, until I switched over to Canary to check my work.</p>

<!-- more -->


<p><img class="center" src="http://robdodson.s3.amazonaws.com/images/polymer-fonts-busted.png" title="'Busted Polymer Fonts'" ></p>

<p>uh oh...</p>

<p>At first, I was pretty confused. Why was everything working fine in Chrome, but acting crazy in Canary? I did some digging and manged to turn up <a href="https://groups.google.com/d/msg/polymer-dev/UUwew3x82EU/m9x2qWPi9ZoJ">this thread</a> on the Polymer mailing list.</p>

<h2>The Fix</h2>

<p>I had a bit of an "aha moment" when I remembered that the current version of Chrome doesn't actually hide any styles in the Shadow DOM, so my <code>@font-face</code> rules were ending up in the global scope. Canary, on the other hand, is encapsulating those styles in a shadow boundary and falling prey to an apparent bug.</p>

<p>A simple workaround is to pull your <code>@font-face</code> rules out of the stylesheet for your element, and move them to the top of your import, like so:</p>

<p>```
&lt;style&gt;
  @font-face {</p>

<pre><code>font-family: 'FontAwesome';
src: url('../fonts/fontawesome-webfont.eot?v=4.0.3');
src: url('../fonts/fontawesome-webfont.eot?#iefix&amp;v=4.0.3') format('embedded-opentype'), url('../fonts/fontawesome-webfont.woff?v=4.0.3') format('woff'), url('../fonts/fontawesome-webfont.ttf?v=4.0.3') format('truetype'), url('../fonts/fontawesome-webfont.svg?v=4.0.3#fontawesomeregular') format('svg');
font-weight: normal;
font-style: normal;
</code></pre>

<p>  }
&lt;/style&gt;</p>

<p><polymer-element name="semantic-ui-icon" noscript>
  <template></p>

<pre><code>&lt;link rel="stylesheet" href="./icon.css"&gt;
&lt;content&gt;&lt;/content&gt;
</code></pre>

<p>  </template>
</polymer-element>
```</p>

<p>I found this approach <a href="http://www.polymer-project.org/docs/polymer/styling.html#making-styles-global">in the Polymer documentation</a>, so I'm hoping it's considered a best practice. You'll also need to do this if you're using <code>@-webkit-keyframes</code> rules.</p>

<p>I hope that clears things up for some of you who may have been stuck. I know it took me a couple days to come up with this solution, so I thought it best to go ahead and post about it :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Cat and the Hat CSS Selectors]]></title>
    <link href="http://robdodson.me/blog/2013/11/15/the-cat-and-the-hat-css-selectors/"/>
    <updated>2013-11-15T11:08:00-08:00</updated>
    <id>http://robdodson.me/blog/2013/11/15/the-cat-and-the-hat-css-selectors</id>
    <content type="html"><![CDATA[<p><em>03/18/2014: This post is now out of date. The cat and hat CSS selectors have been removed in favor of <a href="http://drafts.csswg.org/css-scoping/#shadow-pseudoelement"><code>::shadow</code></a> and <a href="http://drafts.csswg.org/css-scoping/#deep-combinator"><code>/deep/</code></a>. Take a look at <a href="http://drafts.csswg.org/css-scoping/">the CSS Scoping Draft Spec</a> for current selector status.</em></p>

<p>One of the trickier aspects of encapsulating Shadow DOM CSS is figuring out how much access the parent document should have. Initially it was thought that the Shadow DOM's author would decide which elements could be exposed for styling <a href="/blog/2013/08/29/shadow-dom-styles-cont-dot#parts">by using <code>part</code> attributes</a>, but it seems like that might be too limiting. The thinking now is that the shadow boundary should prevent <em>accidental</em> styling of the shadow DOM, but allow intentional styles. That's where the new "cat" and "hat" CSS selectors come in.</p>

<!-- more -->


<h2>Support <a href="#" id="support"></a></h2>

<p>In order to try the examples I suggest you use <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a> v33 or greater.</p>

<p>Also make sure you've enabled <strong>Experimental Web Platform features</strong> in Chrome's <code>chrome://flags</code>.</p>

<h2>The Hat <a href="#" id="the-hat"></a></h2>

<p>The hat selector, a single caret ( ^ ), allows the parent document to pierce the <strong>upper shadow boundary</strong> and style elements that are one shadow root deep. If you have an element that only has one shadow root you can style pretty much anything inside of it using the hat.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="EhIax" data-user="robdodson" data-default-tab="css" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/EhIax'>Shadow DOM "Hat" CSS selector</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>


<h2>The Cat <a href="#" id="the-cat"></a></h2>

<p>The cat, a double caret ( ^^ ) is much more powerful. It allows you to pierce every layer of the shadow DOM, so if you have shadow DOM within shadow DOM (a common occurrence when you nest custom elements) you can style all of them at once.</p>

<p data-height="315" data-theme-id="0" data-slug-hash="wFqJg" data-user="robdodson" data-default-tab="css" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/wFqJg'>Shadow DOM "Cat" CSS selector</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>


<h2>Styling Native Elements <a href="#" id="styling-native-elements"></a></h2>

<p><a href="https://twitter.com/Volker_E/status/401202275009310722">@Volker_E asked</a> if the cat and hat selectors could be used to style the shadow DOM of native elements like <code>&lt;video&gt;</code>. As it turns out that <em>does</em> work, which is pretty cool.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="iaJHd" data-user="robdodson" data-default-tab="css" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/iaJHd'>Shadow DOM "Cat" and "Hat" CSS selectors</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Repeating Templates in Polymer]]></title>
    <link href="http://robdodson.me/blog/2013/11/12/repeating-templates-in-polymer/"/>
    <updated>2013-11-12T15:14:00-08:00</updated>
    <id>http://robdodson.me/blog/2013/11/12/repeating-templates-in-polymer</id>
    <content type="html"><![CDATA[<p>I ran into a little issue this afternoon working with templates in Polymer and I wanted to quickly jot down my thoughts in case others bump up against this.</p>

<!-- more -->


<h2>Bindings</h2>

<p>Bindings allow you to easily pipe some data into your markup from a JavaScript object of some kind. If you've worked with a library like Mustache or Handlebars before then they should feel familiar.</p>

<p>In Polymer land, the <code>&lt;template&gt;</code> tag has been extended so it supports a few handy binding attributes. These include <code>bind</code>, <code>repeat</code>, <code>if</code>, and <code>ref</code>.</p>

<h2>How Not to Do It</h2>

<p>If you take a look at the Polymer docs on <a href="http://www.polymer-project.org/platform/template.html">template bindings</a> you'll notice that the binding attribute (<code>bind</code>, <code>repeat</code>, etc.) is always located on the first template. For instance:</p>

<p><code>
&lt;template repeat="&amp;#123;{ collection }}"&gt;
  Creates an instance with  for every element in the array collection.
&lt;/template&gt;
</code></p>

<p>This lead me to believe that I should write my element like this:</p>

<p>```
<polymer-element name="polymer-letters">
  <template repeat="&#123;{ letter in letters }}"></p>

<pre><code>&amp;#123;{ letter }}
</code></pre>

<p>  </template>
  <script></p>

<pre><code>Polymer('polymer-letters', {
  letters: ['a', 'b', 'c']
});
</code></pre>

<p>  </script>
</polymer-element>
```</p>

<p>But unfortunately that does not work <span style="color: grey;">#sadtrombone.</span></p>

<h2>The Right Way</h2>

<p>Polymer uses the first <code>template</code> element to create Shadow DOM, so if you want to use a binding <strong>you'll need to nest it <em>inside</em> another template.</strong></p>

<p>Our updated example would look like this:</p>

<p>```
<polymer-element name="polymer-letters">
  <template></p>

<pre><code>&lt;template repeat="&amp;#123;{ letter in letters }}"&gt;
  &amp;#123;{ letter }}
&lt;/template&gt;
</code></pre>

<p>  </template>
  <script></p>

<pre><code>Polymer('polymer-letters', {
  letters: ['a', 'b', 'c']
});
</code></pre>

<p>  </script>
</polymer-element>
```</p>

<p>And here it is running on CodePen:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="wxrqf" data-user="robdodson" data-default-tab="html" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/wxrqf'>Polymer Template Bindings</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>


<p>I mentioned this to Eric Bidelman and he opened <a href="https://github.com/Polymer/docs/issues/191">a ticket to improve the docs</a>, so keep an eye out for that. Hope this helps some of you that may have been stuck :)</p>
]]></content>
  </entry>
  
</feed>
