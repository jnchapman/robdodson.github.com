<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | Rob Dodson talks internets]]></title>
  <link href="http://robdodson.me/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://robdodson.me/"/>
  <updated>2014-08-27T19:56:35-07:00</updated>
  <id>http://robdodson.me/</id>
  <author>
    <name><![CDATA[Rob Dodson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shadow DOM CSS Cheat Sheet]]></title>
    <link href="http://robdodson.me/blog/2014/04/10/shadow-dom-css-cheat-sheet/"/>
    <updated>2014-04-10T22:56:00-07:00</updated>
    <id>http://robdodson.me/blog/2014/04/10/shadow-dom-css-cheat-sheet</id>
    <content type="html"><![CDATA[<p>This guide is my attempt to track the progress of all the new CSS selectors which affect the Shadow DOM. I've written this from the perspective of someone who uses <a href="http://polymer-project.org">Polymer</a> so in a few places I point out polyfill features like <code>shim-shadowdom</code> and <code>polyfill-next-selector</code>. But the selectors themselves are all native and comply to <a href="http://drafts.csswg.org/css-scoping/">the current draft spec</a>.</p>

<!-- more -->


<p>Found a bug? <a href="https://github.com/robdodson/robdodson.github.com/blob/source/source/_posts/2014-04-10-shadow-dom-css-cheat-sheet.markdown">Submit a pull request!</a></p>

<p>Follow <a href="http://twitter.com/rob_dodson">@rob_dodson on the twitters</a></p>

<br>


<br>




<h2><a href="#shadow" id="shadow" class="no-underline">::shadow</a></h2>


<p>Selects shadow trees that are one level deep inside of an element. Will need to be combined with <code>shim-shadowdom</code> directive if used outside of a Polymer element in browsers that lack support for the native selector.</p>

<p><code>
x-foo::shadow h1 {
  color: red;
}
</code>
<a href="http://codepen.io/robdodson/pen/HeLEb">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-shadow">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#deep" id="deep" class="no-underline">/deep/</a></h2>


<p>Selects shadow trees that are N levels deep inside of an element. Will need to be combined with <code>shim-shadowdom</code> directive if used outside of a Polymer element in browsers that lack support for the native selector.</p>

<p><code>
x-foo /deep/ h1 {
  color: red;
}
</code>
<a href="http://codepen.io/robdodson/pen/wraDn/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-deep">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#host" id="host" class="no-underline">:host</a></h2>


<p>Selects a shadow host element. May contain additional identifiers in parenthesis.</p>

<p><code>
:host(.fancy) {
  display: inline-block;
  background: purple;
}
</code>
<a href="http://codepen.io/robdodson/pen/rDuyJ/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-host0">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#host-context" id="host-context" class="no-underline">:host-context</a></h2>


<p>Selects a shadow host based on a matching parent element.</p>

<p><code>
:host-context(.blocky) {
  display: block
  background: red;
}
</code>
<a href="http://codepen.io/robdodson/pen/ftpoG/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-host-context">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>




<br>


<br>




<h2><a href="#content" id="content" class="no-underline">::content</a></h2>


<p>Selects distributed nodes inside of an element. Needs to be paired with <code>polyfill-next-selector</code> for browsers that do not support the native selector.</p>

<p><code>
::content h1 {
  color: red;
}
</code>
<a href="http://codepen.io/robdodson/pen/FokEw/">Try it on CodePen</a> | <a href="http://drafts.csswg.org/css-scoping/#selectordef-content">Read the Spec</a></p>

<table class="plain">
  <thead>
    <tr>
      <th>Support Type</th>
      <th>Chrome</th>
      <th>Firefox</th>
      <th>Internet Explorer</th>
      <th>Safari</th>
      <th>Opera</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="no-border">Polyfill</td>
      <td class="supported">Yes</td>
      <td class="supported">Yes</td>
      <td class="supported">10+</td>
      <td class="supported">6+</td>
      <td class="supported">Yes</td>
    </tr>
    <tr>
      <td>Native</td>
      <td class="supported">35</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
      <td>?</td>
    </tr>
  </tbody>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Cat and the Hat CSS Selectors]]></title>
    <link href="http://robdodson.me/blog/2013/11/15/the-cat-and-the-hat-css-selectors/"/>
    <updated>2013-11-15T11:08:00-08:00</updated>
    <id>http://robdodson.me/blog/2013/11/15/the-cat-and-the-hat-css-selectors</id>
    <content type="html"><![CDATA[<p><em>03/18/2014: This post is now out of date. The cat and hat CSS selectors have been removed in favor of <a href="http://drafts.csswg.org/css-scoping/#shadow-pseudoelement"><code>::shadow</code></a> and <a href="http://drafts.csswg.org/css-scoping/#deep-combinator"><code>/deep/</code></a>. Take a look at <a href="http://drafts.csswg.org/css-scoping/">the CSS Scoping Draft Spec</a> for current selector status.</em></p>

<p>One of the trickier aspects of encapsulating Shadow DOM CSS is figuring out how much access the parent document should have. Initially it was thought that the Shadow DOM's author would decide which elements could be exposed for styling <a href="/blog/2013/08/29/shadow-dom-styles-cont-dot#parts">by using <code>part</code> attributes</a>, but it seems like that might be too limiting. The thinking now is that the shadow boundary should prevent <em>accidental</em> styling of the shadow DOM, but allow intentional styles. That's where the new "cat" and "hat" CSS selectors come in.</p>

<!-- more -->


<h2>Support <a href="#" id="support"></a></h2>

<p>In order to try the examples I suggest you use <a href="https://www.google.com/intl/en/chrome/browser/canary.html">Chrome Canary</a> v33 or greater.</p>

<p>Also make sure you've enabled <strong>Experimental Web Platform features</strong> in Chrome's <code>chrome://flags</code>.</p>

<h2>The Hat <a href="#" id="the-hat"></a></h2>

<p>The hat selector, a single caret ( ^ ), allows the parent document to pierce the <strong>upper shadow boundary</strong> and style elements that are one shadow root deep. If you have an element that only has one shadow root you can style pretty much anything inside of it using the hat.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="EhIax" data-user="robdodson" data-default-tab="css" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/EhIax'>Shadow DOM "Hat" CSS selector</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>


<h2>The Cat <a href="#" id="the-cat"></a></h2>

<p>The cat, a double caret ( ^^ ) is much more powerful. It allows you to pierce every layer of the shadow DOM, so if you have shadow DOM within shadow DOM (a common occurrence when you nest custom elements) you can style all of them at once.</p>

<p data-height="315" data-theme-id="0" data-slug-hash="wFqJg" data-user="robdodson" data-default-tab="css" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/wFqJg'>Shadow DOM "Cat" CSS selector</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>


<h2>Styling Native Elements <a href="#" id="styling-native-elements"></a></h2>

<p><a href="https://twitter.com/Volker_E/status/401202275009310722">@Volker_E asked</a> if the cat and hat selectors could be used to style the shadow DOM of native elements like <code>&lt;video&gt;</code>. As it turns out that <em>does</em> work, which is pretty cool.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="iaJHd" data-user="robdodson" data-default-tab="css" class='codepen'>See the Pen <a href='http://codepen.io/robdodson/pen/iaJHd'>Shadow DOM "Cat" and "Hat" CSS selectors</a> by Rob Dodson (<a href='http://codepen.io/robdodson'>@robdodson</a>) on <a href='http://codepen.io'>CodePen</a></p>


<script async src="http://robdodson.me//codepen.io/assets/embed/ei.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nth-child is weird]]></title>
    <link href="http://robdodson.me/blog/2013/08/04/nth-child-is-weird/"/>
    <updated>2013-08-04T10:55:00-07:00</updated>
    <id>http://robdodson.me/blog/2013/08/04/nth-child-is-weird</id>
    <content type="html"><![CDATA[<p>I ran into a CSS bug today and it brought up an interesting (and important) question: What's the difference between <code>nth-child</code> and <code>nth-of-type</code>?</p>

<!--more-->


<h2>Comparing two things or one</h2>

<p>Take a look at this sample code to get a feel for what we're talking about.</p>

<p>``` html</p>

<div>
  <p>This paragraph is not green :(</p>
  <p>This paragraph is green!</p>
</div>


<p>```</p>

<p><code>css
p:nth-child(2) {
  background-color: green;
}
</code></p>

<p>You'll notice that we're setting our second <code>p</code> element to have a <code>background-color</code> of <code>green</code>. To do this we use <code>p:nth-child(2)</code>. I think the way most people (myself included) would read that selector is "select the second child paragraph". But if we change the markup to look like this:</p>

<p>``` html</p>

<div>
  <h1>Hello World!</h1>
  <p>This paragraph is not green :(</p>
  <p>This paragraph is green!</p>
</div>


<p><code>``
Suddenly our green background moves to the wrong element. What gives?! As it turns out,</code>nth-child` counts all child elements regardless of what tag they are using.</p>

<p>As <a href="http://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/">Chris Coyier puts it on CSS-Tricks.</a></p>

<p><blockquote><p>Our :nth-child selector, in "Plain English," means select an element <em>if</em>:</p></p><p><p>It is a paragraph element<br/>It is the second child of a parent</p></blockquote></p>

<p>Since we've added another child in the form of an <code>h1</code> tag, we need to now say <code>p:nth-child(3)</code> if we want to select the same element. In my mind that makes the <code>nth-child</code> tag extremely brittle and somewhat counterintuitive.</p>

<p>Thankfully there's an alternative in form of the <code>nth-of-type</code> selector.</p>

<p><code>css
p:nth-of-type(2) {
  background-color: green;
}
</code></p>

<p>Again, quoting <a href="http://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/">Mr. Coyier</a>:</p>

<p><blockquote><p>Our :nth-of-type selector, in "Plain English," means:</p></p><p><p>Select the second paragraph child of a parent</p></blockquote></p>

<p>So <code>nth-of-type</code> gives us the functionality we were originally looking for and doesn't require us to change our markup if we add additional child elements which use different tags. That's pretty sweet. I wonder why I don't see <code>nth-of-type</code> used as often? It looks like they're both supported in Chrome/FF and IE9+. Maybe it's because <code>nth-child</code> initially seems easier to reason about although in actuality it's a little more complex.</p>

<p>If you want to play around with the idea <a href="http://codepen.io/robdodson/pen/GzuKH">I've put together a codepen.</a> Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Responsive Grid with Foundation]]></title>
    <link href="http://robdodson.me/blog/2012/06/10/building-a-responsive-grid-with-foundation/"/>
    <updated>2012-06-10T20:24:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/10/building-a-responsive-grid-with-foundation</id>
    <content type="html"><![CDATA[<p>Yesterday I introduced <a href="http://smacss.com/">SMACSS</a> and did my best to give a high level overview of its main ideas. I'm using it on my current project and I'm really enjoying it so far. There's just something about having things codified by someone with more experience that gives me immense comfort. When I feel confused I can refer back to those docs and sort out what would be the best path. Standing on the shoulders of giants and all that jazz ;)</p>

<p>Today I want to talk about a CSS framework called <a href="http://foundation.zurb.com/">Foundation</a>, written by the team at <a href="http://www.zurb.com/">ZURB.</a> Unlike SMACSS, Foundation is an actual library of modular code ready to help you quickly prototype your project. The two aren't mutually exclusive. You might think of Foundation as a shiny new toolbox but SMACSS is going to be your 'How To' manual, helping you implement all the new goodes that Foundation has to offer.</p>

<!--more-->


<p>I'm sure many of you have heard of <a href="http://twitter.github.com/bootstrap/">Bootstrap</a> which is very similar and somewhat more popular than Foundation. I chose to use Foundation for this post because Bootstrap feels bloated to me, and I also didn't want to have to do everything in <a href="http://lesscss.org/">LESS.</a> Don't get me wrong, I loves me some LESS and some <a href="http://sass-lang.com/">SASS</a>, but not everyone is comfortable with those tools and it's already a big ask to ramp up on a new CSS framework.</p>

<p>Since it's a little late in the evening I'm just going to dip my toe into some of what Foundation has to offer by quickly mocking up a very simple layout using their responsive grids.</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_mockup.png" title="'Our very basic responsive layout'" ></p>

<p>Obviously nothing fancy, the main bits I want to explore are how easy it is to lay items out using the grid and how does it react on the iPhone.</p>

<h2>Everything in its place</h2>

<p>The first thing you should do, if you haven't already is to go to <a href="http://foundation.zurb.com/">the Foundation site</a> and download the package.</p>

<p>Let's make a new folder with an index.html file and bring over the javascripts and stylesheets folders from the Foundation package. Just to start out your new index.html file should look something like this:</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;

&lt;!-- Set the viewport width to device width for mobile --&gt;
&lt;meta name="viewport" content="width=device-width" /&gt;

&lt;title&gt;Responsive Grid Prototype&lt;/title&gt;

&lt;!-- Included CSS Files --&gt;
&lt;link rel="stylesheet" href="stylesheets/foundation.css"&gt;
&lt;link rel="stylesheet" href="stylesheets/app.css"&gt;

&lt;script src="javascripts/modernizr.foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;!-- container --&gt;
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;header class="twelve columns"&gt;
            &lt;p&gt;HEADER&lt;/p&gt;
        &lt;/header&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- container --&gt;


&lt;!-- Included JS Files --&gt;
&lt;script src="javascripts/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="javascripts/foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>Couple that with the <code>app.css</code> file, like so:</p>

<p>``` css stylesheets/app.css
html, body {</p>

<pre><code>color: #FFF;
font-family: Helvetica, sans-serif;
font-size: 30px;
</code></pre>

<p>}</p>

<p>header {</p>

<pre><code>background: #CCC;
height: 100px;
text-align: center;
</code></pre>

<p>}
<code>``
That should give us our roughed out grey header area. If we examine our HTML a few items should jump out. Mainly that we're using classes like</code>.container<code>,</code>.row<code>and</code>.twelve .columns`. These are all part of Foundation's grid system which seperates major sections into subcategories to help with organization and layout. The documentation explains it better than I can:</p>

<blockquote><p>The grid is built around three key elements: containers, rows, and columns. Containers create base padding for the page; rows create a max-width and contain the columns; and columns create the final structure.</p></blockquote>

<p>Since Foundation uses a twelve column grid system, specifying that an item is <code>.twelve .columns</code> means it will stretch to be the full width of its row. By default a row's maximum width is 980px but we can change this if we want in the <code>foundation.css</code> file.</p>

<p>``` css stylesheets/foundation.css
.row { width: 100%; max-width: 980px; min-width: 727px; margin: 0 auto; }</p>

<pre><code>/* To fix the grid into a certain size, set max-width to width */
</code></pre>

<p>```</p>

<p>With that knowledge we can go ahead and quickly mock up the other sections of our page.</p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;

&lt;!-- Set the viewport width to device width for mobile --&gt;
&lt;meta name="viewport" content="width=device-width" /&gt;

&lt;title&gt;Responsive Grid Prototype&lt;/title&gt;

&lt;!-- Included CSS Files --&gt;
&lt;link rel="stylesheet" href="stylesheets/foundation.css"&gt;
&lt;link rel="stylesheet" href="stylesheets/app.css"&gt;

&lt;script src="javascripts/modernizr.foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;!-- container --&gt;
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;header class="twelve columns"&gt;
            &lt;p&gt;HEADER&lt;/p&gt;
        &lt;/header&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;div class="main eight columns"&gt;
            &lt;p&gt;MAIN&lt;/p&gt;
        &lt;/div&gt;
        &lt;aside class="four columns hide-on-phones"&gt;
            &lt;p&gt;ASIDE&lt;/p&gt;
        &lt;/aside&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;footer class="twelve columns"&gt;
            &lt;p&gt;FOOTER&lt;/p&gt;
        &lt;/footer&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- container --&gt;


&lt;!-- Included JS Files --&gt;
&lt;script src="javascripts/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="javascripts/foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>And we'll need to update the CSS to match.</p>

<p>``` css app.css
html, body {</p>

<pre><code>color: #FFF;
font-family: Helvetica, sans-serif;
font-size: 30px;
</code></pre>

<p>}</p>

<p>header, .main, aside, footer {</p>

<pre><code>margin-top: 20px;
background: #CCC;
height: 100px;
text-align: center;
</code></pre>

<p>}
```</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_layout_basic.png" title="'Our basic layout'" ></p>

<p>That wasn't so hard was it?</p>

<p>Let's throw in some dummy copy to make our columns expand so we can get closer to our original comp. For that we'll turn to <a href="http://baconipsum.com">Bacon Ipsum</a></p>

<p>``` html index.html
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;meta charset="utf-8" /&gt;

&lt;!-- Set the viewport width to device width for mobile --&gt;
&lt;meta name="viewport" content="width=device-width" /&gt;

&lt;title&gt;Responsive Grid Prototype&lt;/title&gt;

&lt;!-- Included CSS Files --&gt;
&lt;link rel="stylesheet" href="stylesheets/foundation.css"&gt;
&lt;link rel="stylesheet" href="stylesheets/app.css"&gt;

&lt;script src="javascripts/modernizr.foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;!-- container --&gt;
&lt;div class="container"&gt;
    &lt;div class="row"&gt;
        &lt;header class="twelve columns"&gt;
        &lt;/header&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;div class="main eight columns"&gt;
            &lt;p&gt;Tri-tip prosciutto drumstick ham hock chicken t-bone, pastrami salami boudin shankle. Short ribs pastrami pancetta bresaola drumstick tail. Meatloaf turducken fatback pork loin, ribeye bresaola t-bone capicola tenderloin drumstick pancetta. Kielbasa jerky pastrami shank andouille leberkas drumstick. Sirloin pastrami shankle cow. Kielbasa hamburger meatball shoulder jowl pork loin. Short ribs bacon t-bone, chuck jerky turkey ham hock salami leberkas ham speck.&lt;/p&gt;

            &lt;p&gt;Tri-tip prosciutto drumstick ham hock chicken t-bone, pastrami salami boudin shankle. Short ribs pastrami pancetta bresaola drumstick tail. Meatloaf turducken fatback pork loin, ribeye bresaola t-bone capicola tenderloin drumstick pancetta. Kielbasa jerky pastrami shank andouille leberkas drumstick. Sirloin pastrami shankle cow. Kielbasa hamburger meatball shoulder jowl pork loin. Short ribs bacon t-bone, chuck jerky turkey ham hock salami leberkas ham speck.&lt;/p&gt;

            &lt;p&gt;Tri-tip prosciutto drumstick ham hock chicken t-bone, pastrami salami boudin shankle. Short ribs pastrami pancetta bresaola drumstick tail. Meatloaf turducken fatback pork loin, ribeye bresaola t-bone capicola tenderloin drumstick pancetta. Kielbasa jerky pastrami shank andouille leberkas drumstick. Sirloin pastrami shankle cow. Kielbasa hamburger meatball shoulder jowl pork loin. Short ribs bacon t-bone, chuck jerky turkey ham hock salami leberkas ham speck.&lt;/p&gt;

            &lt;p&gt;Tri-tip prosciutto drumstick ham hock chicken t-bone, pastrami salami boudin shankle. Short ribs pastrami pancetta bresaola drumstick tail. Meatloaf turducken fatback pork loin, ribeye bresaola t-bone capicola tenderloin drumstick pancetta. Kielbasa jerky pastrami shank andouille leberkas drumstick. Sirloin pastrami shankle cow. Kielbasa hamburger meatball shoulder jowl pork loin. Short ribs bacon t-bone, chuck jerky turkey ham hock salami leberkas ham speck.&lt;/p&gt;
        &lt;/div&gt;
        &lt;aside class="four columns"&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href="#"&gt;First Item&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#"&gt;Second Item&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#"&gt;Third Item&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="#"&gt;Fourth Item&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/aside&gt;
    &lt;/div&gt;
    &lt;div class="row"&gt;
        &lt;footer class="twelve columns"&gt;
        &lt;/footer&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- container --&gt;


&lt;!-- Included JS Files --&gt;
&lt;script src="javascripts/jquery.min.js"&gt;&lt;/script&gt;
&lt;script src="javascripts/foundation.js"&gt;&lt;/script&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>While that expands everything nicely I'd like to add some padding to the mix. But as soon as I try to pad my <code>.main</code> div everything explodes! Turns out we need to make sure we're using <code>box-sizing: border-box</code> otherwise the padding will expand our columns and destroy our grid. For a deeper explanation of <code>box-sizing: border-box</code> checkout <a href="http://paulirish.com/2012/box-sizing-border-box-ftw/">this great post by Paul Irish.</a> With that addition our CSS should now look like this:</p>

<p>``` css stylesheets/app.css
* {</p>

<pre><code>box-sizing: border-box;
</code></pre>

<p>}</p>

<p>html, body {</p>

<pre><code>font-family: Helvetica, sans-serif;
</code></pre>

<p>}</p>

<p>header, .main, aside, footer {</p>

<pre><code>margin-top: 20px;
background: #CCC;
</code></pre>

<p>}</p>

<p>header, footer {</p>

<pre><code>height: 100px;
</code></pre>

<p>}</p>

<p>.main, aside {</p>

<pre><code>padding: 50px;
</code></pre>

<p>}
```</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_layout_ipsum.png" title="'Responsive layout with lorem ipsum'" ></p>

<h2>Making friends with mobile</h2>

<p>Well I'm sure if you've made it to this point you're ready to see how this all works on an iPhone. A quick test you can perform is to just narrow your browser window until it is only about 300px wide (the iPhone has a roughly 320px display area, I believe). As you do so the columns should narrow, reflowing their content as they do so. Eventually our <code>aside</code> will <em>pop</em> from its current position and line up underneath our <code>.main</code> content.</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_linear.png" title="'Linear flow with Foundation'" ></p>

<p>But what if we don't want the sidebar to appear on a mobile phone? Perhaps we just want to show the <code>.main</code> content if the screen is too narrow. Easy! Foundation provides <a href="http://foundation.zurb.com/docs/layout.php">some nice helper classes</a> which we can use to toggle elements on or off depending on the device. We'll just add a <code>.hide-on-phones</code> class to our aside</p>

<p><code>html
&lt;aside class="four columns hide-on-phones"&gt;
</code></p>

<p>and...<em>voila!</em> The <code>aside</code> disappears on small screens!</p>

<p><img class="center" src="https://s3.amazonaws.com/robdodson/images/responsive_hide_on_phones.png" title="'Hiding the aside'" ></p>

<p>Nice and simple, yeah? If you'd like to checkout the project running live you can <a href="http://robdodson.s3-website-us-east-1.amazonaws.com/tutorials/building-a-responsive-grid-with-foundation/index.html">follow this link</a>. Resize your browser or hit it with an iPhone to see it do its magic. Also you can <a href="https://github.com/robdodson/foundation-grid-tutorial">grab the source code off of Github.</a> Enjoy! - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul class="personal-stats">
    <li>Mood: Relaxed</li>
    <li>Sleep: 7</li>
    <li>Hunger: 0</li>
    <li>Coffee: 0</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Talk SMACSS, Man]]></title>
    <link href="http://robdodson.me/blog/2012/06/09/lets-talk-smacss/"/>
    <updated>2012-06-09T21:03:00-07:00</updated>
    <id>http://robdodson.me/blog/2012/06/09/lets-talk-smacss</id>
    <content type="html"><![CDATA[<p>In an effort to further my understanding of CSS best practices I've ended up with two sort of looming frameworks: <a href="http://oocss.org/">OOCSS</a> and <a href="http://smacss.com/">SMACSS.</a> After reading up on both I feel more drawn toward SMACSS, most likely because it features a lumberjack on its site. I want to give a quick summary of what SMACSS has to offer. In so doing I'm going to borrow liberally from the documentation and then explain my thinking as it relates to certain passages. Cool? OK.</p>

<!--more-->


<h2>The Skinny</h2>

<p>The ideas behind SMACSS were fostered over time by its creator, Jonathan Snook, who has worked on tons of sites, most notably YAHOO! Mail's latest redesign. SMACSS is not a library of ready-made code that you can just download like <a href="http://twitter.github.com/bootstrap/">Twitter's Bootstrap</a> or <a href="http://foundation.zurb.com/">ZURB's Foundation.</a> Instead it is a collection of design ideas and suggestions codefied in an easy to read ebook. Think of it as a tool to help you decide <em>how</em> you're going to write your CSS, rather than something which will write your CSS for you.</p>

<p>The Core of the book, which is what I'm going to focus on today, is separated by stylesheet: Base Rules, Layout Rules, Module Rules, State Rules, and Theme Rules.</p>

<h2>Base Rules</h2>

<blockquote><p>Base rules are the defaults. They are almost exclusively single element selectors but it could include attribute selectors, pseudo-class selectors, child selectors or sibling selectors. Essentially, a base style says that wherever this element is on the page, it should look like this. -- SMACSS, Categorizing CSS Rules</p></blockquote>

<p><a href="http://www.stubbornella.org/content/">Nicole Sullivan</a>, creator of OOCSS, suggests that we start with the smallest possible elements of our site and design up from there. In the SMACSS philosophy this process would start with our <code>base.css</code> file. Think of it as the place where we define the absolute most basic styles any element on our site can have.</p>

<p>``` css base.css
body, form {</p>

<pre><code>margin: 0;
padding: 0;
</code></pre>

<p>}</p>

<p>a {</p>

<pre><code>color: #039;
</code></pre>

<p>}</p>

<p>a:hover {</p>

<pre><code>color: #03F;    
</code></pre>

<p>}
```</p>

<p>The idea is to give us a decent, even playing field where all of our core pieces are ready to be used in whatever fashion we see fit. You might find that you enjoy adding your css reset or normalization to a base.css file but personally I like to keep my reset separate to reduce clutter.</p>

<h2>Layout Rules</h2>

<blockquote><p>Layout rules divide the page into sections. Layouts hold one or more modules together. -- SMACSS, Categorizing CSS Rules</p></blockquote>

<p>Your layout rules are where prototypes start to come to life. Every site can be broken down into two very broad layers. The first is the scaffolding of the page and the second is the modules which live in the scaffolding.</p>

<p>To understand scaffolding, try looking at a website like <a href="http://www.cnn.com/">CNN</a> and unfocusing your eyes. Once you're ignoring the words and pictures you should be able to easily describe the major areas of content: the header, the primary content, sidebars, etc. The rules which govern the positioning of those elements should live in <code>layout.css</code>.</p>

<p>``` css layout.css</p>

<h1>header, #article, #footer {</h1>

<pre><code>width: 960px;
margin: auto;
</code></pre>

<p>}</p>

<h1>article {</h1>

<pre><code>border: solid #CCC;
border-width: 1px 0 0;
</code></pre>

<p>}
```</p>

<p>It's also a good place to put other generalized layout styles which might be used elsewhere in your site. For instance, a horizontal list for menu items or breadcrumbs:</p>

<p>``` css layout.css
.h-list {</p>

<pre><code>margin: 0;
padding: 0;
list-style-type: none;
</code></pre>

<p>}
.h-list > li {</p>

<pre><code>display: inline-block;
margin: 0 10px 0 0; 

/* IE7 hack to mimic inline-block on block elements */
*display: inline;
*zoom: 1;
</code></pre>

<p>}
```</p>

<p>These styles don't care about the color or background or any other specifics of their elements. They only care about how those elements will be layed out in space.</p>

<h2>Module Rules</h2>

<blockquote><p>Modules are the reusable, modular parts of our design. They are the callouts, the sidebar sections, the product lists and so on. -- SMACSS, Categorizing CSS Rules</p></blockquote>

<p>The module rules are where the majority of your site code will go, as this sheet defines all the little inhabitants of that second layer I mentioned, the modules <em>inside</em> the scaffolding. Each module should be able to stand on its own, and as such, it might be a good idea to design them first in a separate file so there is no temptation to leverage styles already on the page. Once your module is complete you can drop it into your document and it <em>should</em> play nice with everyone else.</p>

<p>Each module will typically start with a class name, and all subsequent selectors should work from this point down. Or if our module is going to be rather complex we can namespace our selectors. For instance:</p>

<p>``` css modules.css</p>

<p>.pod {</p>

<pre><code>width: 100%
</code></pre>

<p>}</p>

<p>.pod > h3 {</p>

<pre><code>color: #F00;
</code></pre>

<p>}</p>

<p>/<em> Or... </em>/</p>

<p>.pod-title {</p>

<pre><code>color: #F00;
</code></pre>

<p>}</p>

<p>```</p>

<p>Whether you use descendant selectors or namespaced clases is really up to you and how complex your modules get. You definitely don't want to end up with classitis. The advantage to using <code>.pod-title</code> is that it doesn't tie us to an <code>h3</code>, however your markup might become a total mess if every single element requires its own class. Balance is key.</p>

<h3>Subclassing Modules</h3>

<p>One very important concept to keep in mind is that of subclassing modules. Imagine a scenario where you have a widget which exists in your primary content area. One day your boss tells you to move it into the sidebar, and once it's there 99% of the styles should look the same, except the widget will now be about 3/4ths of its normal width and its text should be red instead of blue. Your first inclination might be to move the code for the widget into the sidebar and then to do something like this:</p>

<p>``` css modules.css
/*</p>

<p>DON'T DO THIS!</p>

<p>*/</p>

<p>.widget {</p>

<pre><code>width: 100px;
</code></pre>

<p>}</p>

<p>.widget .widget-title {</p>

<pre><code>color: #00F;
</code></pre>

<p>}</p>

<h1>sidebar .widget {</h1>

<pre><code>width: 75px;
</code></pre>

<p>}</p>

<h1>sidebar .widget .widget-title {</h1>

<pre><code>width: 75px;
</code></pre>

<p>}
```</p>

<p>By leveraging the parent context we've now locked ourselves into a specificity war. Any change to our second widget requires the <code>#sidebar</code> id, which also means that this second widget cannot live anywhere else. Rather than using the parent we should consider the widget that lives in the sidebar as an <em>extension</em> of our original object.</p>

<p>``` css modules.css
.widget {</p>

<pre><code>width: 100px;
</code></pre>

<p>}</p>

<p>.widget .widget-title {</p>

<pre><code>color: #00F;
</code></pre>

<p>}</p>

<p>/<em> Our Subclass </em>/
.widget-constrained {</p>

<pre><code>width: 75px;
</code></pre>

<p>}</p>

<p>.widget-constrained .widget-title {</p>

<pre><code>color: #F00;
</code></pre>

<p>}
```</p>

<p>To use a subclass we should apply both the original and the subclass styles to our element:</p>

<p>``` html</p>

<div class="widget widget-constrained">...</div>


<p>```</p>

<p>The benefit of doing it this way is that the styles are easier to read and also more flexible. Since there's no parent coupling our <code>widget-constrained</code> can be used in the sidebar, footer, modals, or anywhere else you'd like.</p>

<h2>State Rules</h2>

<blockquote><p>State rules are ways to describe how our modules or layouts will look when in a particular state. Is it hidden or expanded? Is it active or inactive? They are about describing how a module or layout looks on screens that are smaller or bigger. They are also about describing how a module might look in different views like the home page or the inside page. -- SMACSS, Categorizing CSS Rules</p></blockquote>

<p>The best example of what should go into a <code>states.css</code> is the classic error state.</p>

<p>``` css states.css
.is-error {</p>

<pre><code>border: 1px solid red;
</code></pre>

<p>}
```</p>

<p>Really anything that would potentially be added with JavaScript to illustrate a change in a module's state would be a good candidate. Some other ones that come to mind are <code>is-hidden</code> or <code>is-pressed</code>.</p>

<p>One rather sticky point to the whole idea of a <code>states.css</code> is that most of the states would need to either rely on being loaded after all your other stylesheets or have an <code>!important</code> added to them. I think for a lot of folks that is a dealbreaker, although in my opinion, if used properly, those few !importants can be very useful. For instance, if we add an <code>is-hidden</code> state to one of our elements I think it's perfectly ok to <code>!important</code> the <code>display: none</code>.</p>

<h3>Module States</h3>

<p>An alternative to using <code>!important</code> all over the place is the idea of module states. So rather than <code>.is-pressed</code> in our <code>states.css</code> we would have <code>.is-btn-pressed</code> next to our <code>.btn</code> module in <code>modules.css</code>. I like this approach a lot and think it solves many of the places where <code>states.css</code> feels too general.</p>

<h2>Theme Rules</h2>

<blockquote><p>Theme rules are similar to state rules in that they describe how modules or layouts might look. Most sites don’t require a layer of theming but it is good to be aware of it.</p></blockquote>

<p>The primary consideration for theme rules are when your site is able to be reskinned and also if the typography can be changed.</p>

<p>Skinning a new module with a <code>theme.css</code> might look something like this:</p>

<p>``` css
/<em> in modules.css </em>/
.mod {</p>

<pre><code>border: 1px solid;
</code></pre>

<p>}</p>

<p>/<em> in theme.css </em>/
.mod {</p>

<pre><code>border-color: blue;
</code></pre>

<p>}
<code>``
Likewise if you need to switch to a different font or size, here is where you would do that. To be honest I don't currently need to make any of my projects skinnable so I haven't explored the ideas around</code>theme.css` all that much, but I do think it's a good idea to keep in the back of your hat.</p>

<h2>Wrap it up!</h2>

<p>That does it for tonight. Hopefully you're a little more enlightened with regards to SMACSS. Definitely <a href="http://smacss.com/">checkout the SMACSS site</a> and grab the book. And as always please feel free to leave comments and feedback. Thanks! - Rob</p>

<p>You should follow me on Twitter <a href="http://twitter.com/rob_dodson">here.</a></p>

<ul class="personal-stats">
    <li>Mood: Anxious</li>
    <li>Sleep: 7</li>
    <li>Hunger: 0</li>
    <li>Coffee: 1</li>
</ul>

]]></content>
  </entry>
  
</feed>
